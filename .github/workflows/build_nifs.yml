name: Build Native NIFs
on:
  workflow_call:
    inputs:
      parent_matrix:
        required: true
        type: string
  workflow_dispatch:

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      combined_matrix: ${{ steps.combine-matrices.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: "Invalidate Cache (Dummy Step)"
        uses: actions/cache@v4
        with:
          path: .github/workflows
          key: matrix-generation-${{ github.run_id }}
      - name: Generate NIF Matrix
        id: generate-nif-matrix
        shell: bash  # Explicitly use bash
        run: |
          echo "--- Debug: Starting generate-nif-matrix ---"

          # ... (File existence and content checks - remain the same) ...
          if [ ! -f .github/workflows/nif_packages.json ]; then
            echo "Error: nif_packages.json not found!" >&2
            exit 1
          fi
          PACKAGES=$(sed 's/\xEF\xBB\xBF//' .github/workflows/nif_packages.json)
          if [ -z "$PACKAGES" ]; then
            echo "Error: nif_packages.json is empty or could not be read!" >&2
            exit 1
          fi
          if ! echo "$PACKAGES" | jq -e . > /dev/null; then
            echo "Error: nif_packages.json contains invalid JSON!" >&2
            exit 1
          fi

          # --- Simplified jq steps with debugging ---
          echo "--- Debug: Processing JSON with jq (step-by-step) ---"

          # Step 1: Parse the JSON and output each element of the array.
          STEP1=$(echo "$PACKAGES" | jq -c '.[]')
          if [ $? -ne 0 ]; then
            echo "Error: jq step 1 failed!" >&2
            exit 1
          fi
          echo "--- Debug: Step 1 result: $STEP1"

          # Step 2:  Extract the 'repos' array from each element.
          STEP2=$(echo "$STEP1" | jq -c '.repos')
          if [ $? -ne 0 ]; then
            echo "Error: jq step 2 failed!" >&2
             echo "$STEP1" | jq -c '.repos' 2>&1
            exit 1
          fi
          echo "--- Debug: Step 2 result: $STEP2"

          # Step 3: Iterate through the 'repos' array.
          STEP3=$(echo "$STEP2" | jq -c '.[]')
           if [ $? -ne 0 ]; then
            echo "Error: jq step 3 failed!" >&2
            exit 1
          fi
          echo "--- Debug: Step 3 result: $STEP3"

          # Step 4: Create the final objects.
          MATRIX=$(echo "$STEP3" | jq -c '{package: (.name), repo: ., config: (.config)}')
          if [ $? -ne 0 ]; then
            echo "Error: jq step 4 failed!" >&2
            echo "--- Debug: jq error output:" >&2
            echo "$STEP3" | jq -c '{package: (.name), repo: ., config: (.config)}' 2>&1 # Capture stderr + stdout
            exit 1
          fi
          echo "--- Debug: Step 4 (final MATRIX) result:"
          echo "$MATRIX"
          # --- End of simplified jq steps ---

          MATRIX_ARRAY=$(echo "[$MATRIX]" | jq -s .)
          if [ $? -ne 0 ]; then
            echo "Error: jq command failed! (2)" >&2
            exit 1
          fi
          echo "nif_matrix=$(echo "$MATRIX_ARRAY" | jq -c .)" >> "$GITHUB_OUTPUT"

      - name: Combine Matrices
        id: combine-matrices
        run: |
          PARENT_MATRIX='${{ inputs.parent_matrix }}'
          NIF_MATRIX=$(echo "${{ steps.generate-nif-matrix.outputs.nif_matrix }}")
          COMBINED_MATRIX=$(echo "$PARENT_MATRIX" | jq --argjson nif "$NIF_MATRIX" -c '
            .platform[] as $p | $nif[] | {platform: $p, package: .package, repo: .repo, config: .config}
          ')
          echo "matrix=$(echo "[$COMBINED_MATRIX]" | jq -s .)" >> "$GITHUB_OUTPUT"

  build-nifs:
    needs: generate-matrix
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.generate-matrix.outputs.combined_matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build NIFs for ${{ matrix.platform.name }} - ${{ matrix.package }} - ${{ matrix.repo }}
        run: |
          echo "Building NIF package ${{ matrix.package }} for repo ${{ matrix.repo }} with config ${{ matrix.config }} (Platform: ${{ matrix.platform.name }})"
          mkdir -p "_build/nifs/${{ matrix.platform.id }}/${{ matrix.package }}/${{ matrix.repo }}"
          echo "Building NIF package ${{ matrix.package }} for repo ${{ matrix.repo }} with config ${{ matrix.config }} (Platform: ${{ matrix.platform.name }})" > "_build/nifs/${{ matrix.platform.id }}/${{ matrix.package }}/${{ matrix.repo }}/msg.txt"

      - name: Upload NIF Artifact
        uses: actions/upload-artifact@v4
        with:
          name: nif-${{ matrix.platform.id }}-${{ matrix.package }}-${{ matrix.repo }}
          path: "_build/nifs/${{ matrix.platform.id }}/${{ matrix.package }}/${{ matrix.repo }}"
