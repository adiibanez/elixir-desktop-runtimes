name: "Android"
on: 
  #workflow_dispatch:
  push:
    branches: 
      - ci_mods
      - refactoring
  #   paths:
  #   # Just run on main branch if "native" path changed.
  #   #- "native/**"
  #   - "**"
  #   # Also run if this file changes.
  #   #- ".github/workflows/release.yml"
  #   #- ".github/workflows/**"
  #   tags:
  #   # Tags will always run.
  #   - "*"
  # pull_request:
  #   paths:
  #     # In PRs we only run if this file changes.
  #     - ".github/workflows/**"

# concurrency:
#   group: ${{ github.workflow }}-${{ github.ref }}
#   cancel-in-progress: true

env:
  OTP_SOURCE: https://github.com/erlang/otp
  OPENSSL_HASH: 002a2d6b30b58bf4bea46c43bdd96365aaf8daa6c428782aa4feee06da197df3
  OPENSSL_VERSION: 3.4.1
  OPENSSL_PREFIX: ${{github.workspace}}/_build/openssl_cache

jobs:
  build-android:
    # if: false
    strategy:
      fail-fast: false
      matrix:
        archs:
          - { id: "arm",
            abi: 23,
            cpu: "arm",
            pc: "arm-unknown",
            name: "androideabi",
            type: "armeabi-v7a"
          }
          - {
            id: "arm64",
            abi: 23,
            cpu: "aarch64",
            pc: "aarch64-unknown",
            name: "android",
            type: "arm64-v8a"
          }
          - {
            id: "x86_64",
            abi: 23,
            cpu: "x86_64",
            pc: "x86_64-pc",
            name: "android",
            type: "x86_64"
          }
        erlixir:
          - { otp-version: 27.3, elixir-version: 1.18.2, erl-opts: '--disable-debug --disable-year2038 --disable-megaco-flex-scanner-lineno --disable-megaco-reentrant-flex-scanner --without-javac --without-odbc --without-wx --disable-megaco --disable-corba'}
          #- { otp-version: 26.2.5.6, elixir-version: 1.16.3 }
          # - { otp-version: 26.2.5.6, elixir-version: 1.18.2 }
    env:
      OTP_TAG: OTP-${{ matrix.erlixir.otp-version }}
      OTP_VERSION: ${{ matrix.erlixir.otp-version }}
      ARCH_IDENTIFIER: ${{matrix.archs.id}}-${{matrix.archs.name}}-${{matrix.archs.abi}}

    name: "Android erlang runtimes"
    runs-on: "ubuntu-latest"

    steps:
      - name: Configure erl options
        if: ${{ matrix.erlixir.erl-opts }} != ''
        run: |
          export KERL_CONFIGURE_OPTIONS=${{matrix.erlixir.erl-opts}}

      - name: erlef/setup-beam Cache
        uses: actions/cache@v3
        id: beam-cache
        with:
          path: /home/runner/work/_temp/.setup-beam/
          key: android-setup-beam-${{env.ARCH_IDENTIFIER}}-${{ matrix.erlixir.otp-version }}-erl-opts-${{matrix.erlixir.erl-opts}}-${{ matrix.erlixir.elixir-version }}

      - name: Setup elixir
        id: setup-beam
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ matrix.erlixir.otp-version }}
          elixir-version: ${{ matrix.erlixir.elixir-version }}

      - name: Save erlef/setup-beam Cache
        if: steps.beam-cache.outputs.cache-hit != 'true' && steps.setup-beam.outcome == 'success'
        uses: actions/cache/save@v3
        with:
          path: /home/runner/work/_temp/.setup-beam/
          key: android-setup-beam-${{env.ARCH_IDENTIFIER}}-${{ matrix.erlixir.otp-version }}-erl-opts-${{matrix.erlixir.erl-opts}}-${{ matrix.erlixir.elixir-version }}

      - name: Debug erlef/setup-beam install locations
        shell: bash
        run: |
          env | grep INSTALL_DIR_FOR_

      - uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: OTP Cache
        uses: actions/cache@v3
        id: otp-cache
        with:
          path: |
            _build/otp_cache/
          key: android-otp-${{ matrix.archs.id }}-${{ matrix.erlixir.otp-version }}-erl-opts-${{matrix.erlixir.erl-opts }}
          restore-keys: |
            android-otp-${{ matrix.archs.id }}-${{ matrix.erlixir.otp-version }}-
            android-otp-${{ matrix.archs.id }}-
      
      # - name: Checkout opt ${{matrix.erlixir.otp-version}}
      #   uses: actions/checkout@v3
      #   if: steps.otp-cache.outputs.cache-hit != 'true'
      #   with: 
      #     path: _build/otp_cache/otp
      #     repository: erlang/otp
      #     ref: ${{ env.OTP_TAG }}

      - name: Download OTP 
        shell: bash
        if: steps.otp-cache.outputs.cache-hit != 'true'
        run: | 
          curl -L -O https://github.com/erlang/otp/releases/download/OTP-${{matrix.erlixir.otp-version}}/otp_src_${{matrix.erlixir.otp-version}}.tar.gz
          mkdir -p _build/otp_cache/
          mv otp_src_${{matrix.erlixir.otp-version}}.tar.gz _build/otp_cache/

      - name: Save OTP Cache
        uses: actions/cache/save@v3
        if: steps.otp-cache.outputs.cache-hit != 'true'
        id: otp-cache-save
        with:
          path: |
            _build/otp_cache/
          key: android-otp-${{ matrix.archs.id }}-${{ matrix.erlixir.otp-version }}-erl-opts-${{matrix.erlixir.erl-opts }}      

      - name: Check otp 
        shell: bash
        run: |
          ls -lah _build/otp_cache/

      - name: Generate beam docker file
        id: generate-dockerfile
        shell: bash
        run: |
          pwd
          mix deps.get
          MIX_TARGET=prod mix compile
          mix run -e 'Mix.Tasks.Package.Android.Runtime.write_beam_dockerfile("${{matrix.archs.id}}", "${{github.workspace}}/_build/Dockerfile_android-beam-${{matrix.archs.id}}")'
          echo "${{github.workspace}}/_build/Dockerfile_android-beam-${{matrix.archs.id}}"
          ls -lah "_build/Dockerfile_android-beam-${{matrix.archs.id}}"
          cat "_build/Dockerfile_android-beam-${{matrix.archs.id}}"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Linux docker android beam builder image
        uses: whoan/docker-build-with-cache-action@v5
        if: steps.generate-dockerfile.outcome == 'success'
        # continue-on-error: true
        id: buildx-beam
        with:
          username: ${{ github.actor }}
          password: ${{secrets.GITHUB_TOKEN}}
          registry: ghcr.io
          image_name: android_beam
          image_tag: "arch_${{env.ARCH_IDENTIFIER}}-${{ matrix.erlixir.otp-version }}-erl-opts-${{matrix.erlixir.erl-opts}}-${{ matrix.erlixir.elixir-version }}"
          dockerfile: "_build/Dockerfile_android-beam-${{matrix.archs.id}}"
          build_extra_args: |
            --platform=linux/amd64
            --build-arg ARCH=${{matrix.archs.id}}
            --build-arg ANDROID_NAME=${{matrix.archs.name}}
            --build-arg ABI=${{matrix.archs.abi}}
            --build-arg OPENSSL_VERSION=${{env.OPENSSL_VERSION}}
            --build-arg OPENSSL_HASH=${{env.OPENSSL_HASH}}
            --build-arg OTP_SOURCE=${{env.OTP_SOURCE}}
            --build-arg OTP_TAG=${{matrix.erlixir.otp-version}}
            --build-arg KERL_CONFIGURE_OPTIONS="${{matrix.erlixir.erl-opts}}"

      - name: Docker images
        shell: bash
        run: |
          docker images

      - name: Build Android ${{env.ARCH_IDENTIFIER}} runtimes
        if: steps.buildx-beam.outcome == 'success'
        env: 
          ARCH: ${{matrix.archs.id}}
          BASE_IMAGE: ghcr.io/adiibanez/android_beam:arch_${{env.ARCH_IDENTIFIER}}-${{ matrix.erlixir.otp-version }}-erl-opts-${{matrix.erlixir.erl-opts}}-${{ matrix.erlixir.elixir-version }}
        run: |
          docker images
          mix deps.get
          mix package.android.runtime --arch ${{matrix.archs.id}}
          mix package.android.nif --arch ${{matrix.archs.id}} # runs multiple iterations based on default_nifs

      - name: Runtime logs
        shell: bash
        run: |
          find . -name runtimes_run.log
          cat `find . -name runtimes_run.log`

      - name: Archive Android runtimes
        uses: actions/upload-artifact@v4
        with:
          name: android-${{env.ARCH_IDENTIFIER}}-${{ matrix.erlixir.otp-version }}-erl-opts-${{matrix.erlixir.erl-opts}}-${{ matrix.erlixir.elixir-version }}-runtime.zip
          path: _build/*.zip

      - name: Generate Android Checksums and Release Notes
        id: android-checksums
        run: |
          cd _build
          # For GNU systems.
          if command -v sha256sum >/dev/null 2>&1; then
              find . -name "*.zip" -print0 | while IFS= read -r -d $'\0' file; do
                sha256sum "$file" >> checksums.txt
              done
          # For BSD systems
          else
              find . -name "*.zip" -print0 | while IFS= read -r -d $'\0' file; do
                shasum -a 256 "$file" >> checksums.txt
              done
          fi
          echo "::set-output name=android_checksums::$(cat checksums.txt)"
          cd ..

      - name: Android ${{env.ARCH_IDENTIFIER}} release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: _build/*.zip
          body: |
            Android Checksums:
            ${{ steps.android-checksums.outputs.android_checksums }}
  