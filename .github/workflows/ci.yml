name: "CI"
on:
  workflow_dispatch:
  push:
    branches: 
      - ci_mods
      - refactoring
    paths:
    # Just run on main branch if "native" path changed.
    #- "native/**"
    - "**"
    # Also run if this file changes.
    #- ".github/workflows/release.yml"
    #- ".github/workflows/**"
    tags:
    # Tags will always run.
    - "*"
  pull_request:
    paths:
      # In PRs we only run if this file changes.
      - ".github/workflows/**"

# concurrency:
#   group: ${{ github.workflow }}-${{ github.ref }}
#   cancel-in-progress: true

env:
  OTP_SOURCE: https://github.com/erlang/otp
  OPENSSL_HASH: 002a2d6b30b58bf4bea46c43bdd96365aaf8daa6c428782aa4feee06da197df3
  OPENSSL_VERSION: 3.4.1
  OPENSSL_PREFIX: ${{github.workspace}}/_build/openssl_cache

jobs:
  build-android:
    if: false
    strategy:
      fail-fast: false
      matrix:
        archs:
          - { id: "arm",
            abi: 23,
            cpu: "arm",
            pc: "arm-unknown",
            name: "androideabi",
            type: "armeabi-v7a"
          }
          - {
            id: "arm64",
            abi: 23,
            cpu: "aarch64",
            pc: "aarch64-unknown",
            name: "android",
            type: "arm64-v8a"
          }
          - {
            id: "x86_64",
            abi: 23,
            cpu: "x86_64",
            pc: "x86_64-pc",
            name: "android",
            type: "x86_64"
          }
        erlixir:
          #- { otp-version: 27.2.4, elixir-version: 1.18.2, erl-opts: "--disable-year2038"}
          #- { otp-version: 26.2.5.6, elixir-version: 1.16.3 }
          - { otp-version: 26.2.5.6, elixir-version: 1.18.2 }
    env:
      OTP_TAG: OTP-${{ matrix.erlixir.otp-version }}
      OTP_VERSION: ${{ matrix.erlixir.otp-version }}
      ARCH_IDENTIFIER: ${{matrix.archs.id}}-${{matrix.archs.name}}-${{matrix.archs.abi}}

    name: "Android erlang runtimes"
    runs-on: "ubuntu-latest"

    steps:
      - name: Configure erl options
        if: ${{ matrix.erlixir.erl-opts }} != ''
        run: |
          export KERL_CONFIGURE_OPTIONS=${{matrix.erlixir.erl-opts}}

      - name: erlef/setup-beam Cache
        uses: actions/cache@v3
        id: beam-cache
        with:
          path: /home/runner/work/_temp/.setup-beam/
          key: android-setup-beam-${{env.ARCH_IDENTIFIER}}-${{ matrix.erlixir.otp-version }}-erl-opts-${{matrix.erlixir.erl-opts}}-${{ matrix.erlixir.elixir-version }}

      - name: Setup elixir
        id: setup-beam
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ matrix.erlixir.otp-version }}
          elixir-version: ${{ matrix.erlixir.elixir-version }}

      - name: Save erlef/setup-beam Cache
        if: steps.beam-cache.outputs.cache-hit != 'true' && steps.setup-beam.outcome == 'success'
        uses: actions/cache/save@v3
        with:
          path: /home/runner/work/_temp/.setup-beam/
          key: android-setup-beam-${{env.ARCH_IDENTIFIER}}-${{ matrix.erlixir.otp-version }}-erl-opts-${{matrix.erlixir.erl-opts}}-${{ matrix.erlixir.elixir-version }}

      - name: Debug erlef/setup-beam install locations
        shell: bash
        run: |
          env | grep INSTALL_DIR_FOR_

      - uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: OTP Cache
        uses: actions/cache@v3
        id: otp-cache
        with:
          path: |
            _build/otp_cache/
          key: android-otp-${{ matrix.archs.id }}-${{ matrix.erlixir.otp-version }}-erl-opts-${{matrix.erlixir.erl-opts }}
          restore-keys: |
            android-otp-${{ matrix.archs.id }}-${{ matrix.erlixir.otp-version }}-
            android-otp-${{ matrix.archs.id }}-
      
      # - name: Checkout opt ${{matrix.erlixir.otp-version}}
      #   uses: actions/checkout@v3
      #   if: steps.otp-cache.outputs.cache-hit != 'true'
      #   with: 
      #     path: _build/otp_cache/otp
      #     repository: erlang/otp
      #     ref: ${{ env.OTP_TAG }}

      - name: Download OTP 
        shell: bash
        if: steps.otp-cache.outputs.cache-hit != 'true'
        run: | 
          curl -L -O https://github.com/erlang/otp/releases/download/OTP-${{matrix.erlixir.otp-version}}/otp_src_${{matrix.erlixir.otp-version}}.tar.gz
          mkdir -p _build/otp_cache/
          mv otp_src_${{matrix.erlixir.otp-version}}.tar.gz _build/otp_cache/

      - name: Save OTP Cache
        uses: actions/cache/save@v3
        if: steps.otp-cache.outputs.cache-hit != 'true'
        id: otp-cache-save
        with:
          path: |
            _build/otp_cache/
          key: android-otp-${{ matrix.archs.id }}-${{ matrix.erlixir.otp-version }}-erl-opts-${{matrix.erlixir.erl-opts }}      

      - name: Check otp 
        shell: bash
        run: |
          ls -lah _build/otp_cache/

      - name: Generate beam docker file
        id: generate-dockerfile
        shell: bash
        run: |
          pwd
          MIX_TARGET=prod mix compile
          mix run -e 'Mix.Tasks.Package.Android.Runtime.write_beam_dockerfile("${{matrix.archs.id}}", "${{github.workspace}}/_build/Dockerfile_android-beam-${{matrix.archs.id}}")'
          echo "${{github.workspace}}/_build/Dockerfile_android-beam-${{matrix.archs.id}}"
          ls -lah "_build/Dockerfile_android-beam-${{matrix.archs.id}}"
          cat "_build/Dockerfile_android-beam-${{matrix.archs.id}}"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Linux docker android beam builder image
        uses: whoan/docker-build-with-cache-action@v5
        if: steps.generate-dockerfile.outcome == 'success'
        # continue-on-error: true
        id: buildx-beam
        with:
          username: ${{ github.actor }}
          password: ${{secrets.GITHUB_TOKEN}}
          registry: ghcr.io
          image_name: android_beam
          image_tag: "arch_${{env.ARCH_IDENTIFIER}}-${{ matrix.erlixir.otp-version }}-erl-opts-${{matrix.erlixir.erl-opts}}-${{ matrix.erlixir.elixir-version }}"
          dockerfile: "_build/Dockerfile_android-beam-${{matrix.archs.id}}"
          build_extra_args: |
            --platform=linux/amd64
            --build-arg ARCH=${{matrix.archs.id}}
            --build-arg ANDROID_NAME=${{matrix.archs.name}}
            --build-arg ABI=${{matrix.archs.abi}}
            --build-arg OPENSSL_VERSION=${{env.OPENSSL_VERSION}}
            --build-arg OPENSSL_HASH=${{env.OPENSSL_HASH}}
            --build-arg OTP_SOURCE=${{env.OTP_SOURCE}}
            --build-arg OTP_TAG=${{matrix.erlixir.otp-version}}
            --build-arg KERL_CONFIGURE_OPTIONS="${{matrix.erlixir.erl-opts}}"

      - name: Docker images
        shell: bash
        run: |
          docker images

      - name: Build Android ${{env.ARCH_IDENTIFIER}} runtimes
        if: steps.buildx-beam.outcome == 'success'
        env: 
          ARCH: ${{matrix.archs.id}}
          BASE_IMAGE: ghcr.io/adiibanez/android_beam:arch_${{env.ARCH_IDENTIFIER}}-${{ matrix.erlixir.otp-version }}-erl-opts-${{matrix.erlixir.erl-opts}}-${{ matrix.erlixir.elixir-version }}
        run: |
          docker images
          mix deps.get
          mix package.android.runtime --arch ${{matrix.archs.id}}
          mix package.android.nif --arch ${{matrix.archs.id}} # runs multiple iterations based on default_nifs

      - name: Runtime logs
        shell: bash
        run: |
          find . -name runtimes_run.log
          cat `find . -name runtimes_run.log`

      - name: Archive Android runtimes
        uses: actions/upload-artifact@v4
        with:
          name: android-${{env.ARCH_IDENTIFIER}}-${{ matrix.erlixir.otp-version }}-erl-opts-${{matrix.erlixir.erl-opts}}-${{ matrix.erlixir.elixir-version }}-runtime.zip
          path: _build/*.zip

      - name: Generate Android Checksums and Release Notes
        id: android-checksums
        run: |
          cd _build
          # For GNU systems.
          if command -v sha256sum >/dev/null 2>&1; then
              find . -name "*.zip" -print0 | while IFS= read -r -d $'\0' file; do
                sha256sum "$file" >> checksums.txt
              done
          # For BSD systems
          else
              find . -name "*.zip" -print0 | while IFS= read -r -d $'\0' file; do
                shasum -a 256 "$file" >> checksums.txt
              done
          fi
          echo "::set-output name=android_checksums::$(cat checksums.txt)"
          cd ..

      - name: Android ${{env.ARCH_IDENTIFIER}} release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: _build/*.zip
          body: |
            Android Checksums:
            ${{ steps.android-checksums.outputs.android_checksums }}
  
  build-ios:
    # if: false
    strategy:
      fail-fast: false
      matrix:
        #archs: ["ios-arm64", "iossimulator-x86_64", "iossimulator-arm64"]
        archs: ["ios-arm64"]
        # archs:
        #   - {
        #     id: "ios",
        #     mix_id: "ios",
        #     arch: "armv7",
        #     sdk: "iphoneos",
        #     openssl_arch: "ios-xcrun",
        #     xcomp: "arm-ios",
        #     name: "arm-apple-ios",
        #     cflags: "-mios-version-min=7.0.0 -fno-common -Os -D__IOS__=yes",
        #     }
        #   - {id: "ios64",
        #     mix_id: "ios-arm64",
        #     arch: "arm64",
        #     sdk: "iphoneos",
        #     openssl_arch: "ios64-xcrun",
        #     xcomp: "arm64-ios",
        #     name: "aarch64-apple-ios",
        #     cflags: "-mios-version-min=7.0.0 -fno-common -Os -D__IOS__=yes"
        #   }
        #   - {
        #     id: "iossimulator",
        #     mix_id: "iossimulator-x86_64",
        #     arch: "x86_64",
        #     sdk: "iphonesimulator",
        #     openssl_arch: "iossimulator-x86_64-xcrun",
        #     xcomp: "x86_64-iossimulator",
        #     name: "x86_64-apple-iossimulator",
        #     cflags: "-mios-simulator-version-min=7.0.0 -fno-common -Os -D__IOS__=yes"
        #   }
        #   - {
        #     id: "iossimulator",
        #     mix_id: "iossimulator-arm64",
        #     arch: "arm64",
        #     sdk: "iphonesimulator",
        #     openssl_arch: "iossimulator-arm64-xcrun",
        #     xcomp: "arm64-iossimulator",
        #     name: "aarch64-apple-iossimulator",
        #     cflags: "-mios-simulator-version-min=7.0.0 -fno-common -Os -D__IOS__=yes",
        #   }

        erlixir:
          #- { otp-version: 27.2.4, elixir-version: 1.18.2, erl-opts: "--disable-year2038"} # configured in package_ios_runtime.ex too configuration
          #- { otp-version: 26.2.5.6, elixir-version: 1.16.3 }
          - { otp-version: 26.2.5.6, elixir-version: 1.18.2 }
    env:
      OTP_TAG: OTP-${{ matrix.erlixir.otp-version }}
      RUSTLER_BTLEPLUG_BUILD: 1
      #OPENSSL_HASH: 002a2d6b30b58bf4bea46c43bdd96365aaf8daa6c428782aa4feee06da197df3
      #OPENSSL_VERSION: 3.4.1

    name: "iOS erlang runtime"
    runs-on: "macos-latest"
    steps:
      - name: Prepare brew tools
        shell: bash
        run: |
          brew install git carthage coreutils
          brew unlink openssl@1.1 && brew link openssl@3
          brew install asdf
          brew info asdf
      - uses: actions/checkout@v4
      #- uses: asdf-vm/actions/setup@v3

      - name: Asdf Cache
        uses: actions/cache@v3
        id: asdf-cache
        with:
          path: /Users/runner/.asdf
          key: macos-asdf-${{ matrix.erlixir.otp-version }}-erl-opts-${{matrix.erlixir.erl-opts }}-${{ matrix.erlixir.elixir-version }}

      - name: Setup asdf
        if: steps.asdf-cache.outputs.cache-hit != 'true'
        run: |
          #echo 'export PATH="$HOME/.asdf/shims:$HOME/.asdf/bin:$PATH"' >> $HOME/.zshrc
          #export PATH="$HOME/.asdf/shims:$HOME/.asdf/bin:$PATH"
          #git clone https://github.com/asdf-vm/asdf.git ~/.asdf
          # source $HOME/.zshrc || true

      - name: Configure erl options
        if: ${{ matrix.erlixir.erl-opts }} != ''
        run: |
          export KERL_CONFIGURE_OPTIONS="${{matrix.erlixir.erl-opts}}"
          
      - name: Setup elixir
        id: asdf-setup
        continue-on-error: true
        if: steps.asdf-cache.outputs.cache-hit != 'true'
        run: | 
          asdf plugin add erlang
          asdf plugin add elixir
          echo "erlang ${{matrix.erlixir.otp-version}}" >> .tool-versions
          echo "elixir ${{matrix.erlixir.elixir-version}}" >> .tool-versions
          
          asdf install erlang
          # asdf set erlang ${{matrix.erlixir.otp-version}}
          asdf install elixir
          # asdf set elixir ${{matrix.erlixir.elixir-version}}

          asdf reshim elixir
          asdf current

          type -a mix
          type -a elixir

          whereis mix
          mix --version
          
          mix do local.hex, local.phx || true
          mix --version || true
          

      - name: Save asdf Cache
        if: steps.asdf-cache.outputs.cache-hit != 'true' && steps.asdf-setup.outcome == 'success'
        uses: actions/cache/save@v3
        with:
          path: |
            /Users/runner/.asdf
          key: macos-asdf-${{ matrix.erlixir.otp-version }}-erl-opts-${{matrix.erlixir.erl-opts }}-${{ matrix.erlixir.elixir-version }}

      - name: OTP Cache
        uses: actions/cache@v3
        id: otp-cache
        with:
          path: |
            _build/otp_cache
          key: macos-otp-${{ matrix.archs}}-${{ matrix.erlixir.otp-version }}-erl-opts-${{matrix.erlixir.erl-opts }}
          restore-keys: |
            macos-otp-${{ matrix.archs}}-${{ matrix.erlixir.otp-version }}-
            macos-otp-

      # - name: Checkout opt ${{matrix.erlixir.otp-version}}
      #   uses: actions/checkout@v3
      #   if: steps.otp-cache.outputs.cache-hit != 'true'
      #   with: 
      #     path: _build/otp_cache/otp
      #     repository: erlang/otp
      #     ref: ${{ env.OTP_TAG }}

      # - name: Check otp 
      #   shell: bash
      #   run: |
      #     ls -lah _build/otp_cache/otp
      #     # find _build/otp_cache/ -name vsn.mk
      #     pwd
      
      - name: Openssl Cache
        uses: actions/cache@v3
        id: openssl-cache
        with:
          path: |
            _build/openssl_cache/
          key: macos-openssl-${{ matrix.archs}}-${{env.OPENSSL_VERSION}}
          # restore-keys: 
          #   macos-openssl-

      # - name: Build iOS runtime
      #   id: build-ios
      #   shell: bash
      #   # continue-on-error: false
      #   env: 
      #     PARALLEL: "true"
      #     # PATH: "/usr/bin:/usr/sbin/:/usr/local/bin:$HOME/.asdf/shims:$HOME/.asdf/bin:$PATH"
      #   run:  |
      #     asdf current
      #     mix package.ios.runtime --arch ${{matrix.archs}}

      # - name: Runtime logs
      #   shell: bash
      #   run: |
      #     find . -name runtimes_run.log
      #     cat `find . -name runtimes_run.log`
      #     find . -name aarch64-apple-darwin23.6.0
      #     ls -lah `find . -name aarch64-apple-darwin23.6.0`/Makefile || true

      # - name: Info Openssl
      #   shell: bash
      #   #continue-on-error: true
      #   run: |
      #     ls -lah _build/openssl_cache || true
      #     find . -name openssl

      # - name: Save Openssl Cache
      #   uses: actions/cache/save@v3
      #   if: steps.openssl-cache.outputs.cache-hit != 'true'
      #   # && steps.build-ios.outcome == 'success'
      #   with:
      #     path: |
      #       _build/openssl_cache/
      #     key: macos-openssl-${{ matrix.archs }}-${{env.OPENSSL_VERSION}}

      # - name: Save OTP Cache
      #   uses: actions/cache/save@v3
      #   if: steps.otp-cache.outputs.cache-hit != 'true'
      #   id: otp-cache-save
      #   with:
      #     path: |
      #       _build/otp_cache
      #     key: macos-otp-${{ matrix.archs}}-${{ matrix.erlixir.otp-version }}-erl-opts-${{matrix.erlixir.erl-opts }}

      # - name: Restructure dir for iOS artifact
      #   shell: bash
      #   if: steps.build-ios.outcome == 'success'
      #   run: |
      #     mkdir ${{github.workspace}}/_build/ios-${{matrix.archs}}-${{ matrix.erlixir.otp-version }}-erl-opts-${{matrix.erlixir.erl-opts}}-${{ matrix.erlixir.elixir-version }}-runtime.xcframework
      #     ls -lah _build
      #     cp _build/liberlang.xcframework ${{github.workspace}}/_build/ios-${{matrix.archs}}-${{ matrix.erlixir.otp-version }}-erl-opts-${{matrix.erlixir.erl-opts}}-${{ matrix.erlixir.elixir-version }}-runtime.xcframework/

      # - name: Archive runtimes
      #   uses: actions/upload-artifact@v4
      #   #if: steps.build-ios.outcome == 'success'
      #   continue-on-error: true
      #   with:
      #     name: ios-${{matrix.archs}}-${{ matrix.erlixir.otp-version }}-erl-opts-${{matrix.erlixir.erl-opts}}-${{ matrix.erlixir.elixir-version }}-runtime.xcframework.zip
      #     #path: _build/liberlang.xcframework
      #     path: |
      #       ${{github.workspace}}/_build/ios-${{matrix.archs}}-${{ matrix.erlixir.otp-version }}-erl-opts-${{matrix.erlixir.erl-opts}}-${{ matrix.erlixir.elixir-version }}-runtime.xcframework
      #       runtimes_run.log

      # - name: Generate iOS Checksums and Release Notes
      #   id: ios-checksums
      #   if: steps.build-ios.outcome == 'success'
      #   shell: bash
      #   run: |
      #     cd _build
      #     # For GNU systems.
      #     if command -v sha256sum >/dev/null 2>&1; then
      #         find . -name "*.xcframework.zip" -print0 | while IFS= read -r -d $'\0' file; do
      #           sha256sum "$file" >> checksums.txt
      #         done
      #     # For BSD systems
      #     else
      #         find . -name "*.xcframework.zip" -print0 | while IFS= read -r -d $'\0' file; do
      #           shasum -a 256 "$file" >> checksums.txt
      #         done
      #     fi
      #     echo "::set-output name=ios_checksums::$(cat checksums.txt)"
      #     cd ..

      # # - name: iOS release
      # #   uses: softprops/action-gh-release@v1
      # #   if: startsWith(github.ref, 'refs/tags/')
      # #   with:
      # #     #files: _build/liberlang.xcframework
      # #     files: ios-${{ matrix.erlixir.otp-version }}-erl-opts-${{matrix.erlixir.erl-opts}}-${{ matrix.erlixir.elixir-version }}-runtime.xcframework.zip
      # #     body: |
      # #       iOS Checksums:
      # #       ${{ steps.ios-checksums.outputs.ios_checksums }}
  
  archive-ios:
    runs-on: macos-latest
    needs: [build-ios]
    steps: 
      - uses: actions/checkout@v3
      - name: Load outputs
        uses: actions/download-artifact@v3
        with:
          name: outputs
          path: outputs

      - run: |
          ls outputs
          cat outputs/*.txt
        
  
    