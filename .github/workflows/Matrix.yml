name: Build Apple targets liberlang.xframework

on:
  push:
    branches:
      - tuderlidru
      #- main
      #- refactoring
  pull_request:

jobs:
  build_setup:
    name: Setup Dependencies
    runs-on: macos-latest

    env: 
      FRAMEWORK_NAME: "liberlang"

    outputs:
      otp_build_path: ${{ steps.otp-setup.outputs.otp_build_path }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

    #   - name: Set up ASDF Erlang/Elixir
    #     uses: erlef/setup-beam@v1
    #     with:
    #       otp-version: "27.2"
    #       elixir-version: "1.16.3"

      - name: Cache ASDF and Toolchains
        uses: actions/cache@v4
        id: asdf-cache
        with:
          path: ~/.asdf
          key: asdf-cache-${{ runner.os }}-${{ hashFiles('.tool-versions') }}
          restore-keys: |
            asdf-cache-${{ runner.os }}-

      - name: Install Dependencies (Mix deps)
        if: false
        run: echo mix deps.get && mix deps.compile

      - name: Download and Extract OpenSSL
        id: openssl-download
        run: |
          OPENSSL_VERSION="3.4.1"
          OPENSSL_HASH="002a2d6b30b58bf4bea46c43bdd96365aaf8daa6c428782aa4feee06da197df3"
          mkdir -p _build/openssl
          cd _build/openssl
          # wget "https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz"
          # echo "$OPENSSL_HASH  openssl-$OPENSSL_VERSION.tar.gz" | sha256sum -c
          # tar xzf openssl-$OPENSSL_VERSION.tar.gz
          echo "OPENSSL_VERSION=$OPENSSL_VERSION" >> "$GITHUB_OUTPUT"
          echo "OPENSSL_HASH=$OPENSSL_HASH" >> "$GITHUB_OUTPUT"
          echo "OPENSSL_PATH=$PWD/openssl-$OPENSSL_VERSION" >> "$GITHUB_OUTPUT"

      - name: Build OTP Round 1 (xcomp)
        id: otp-setup
        shell: bash
        run: |
          export KERL_CONFIGURE_OPTIONS="--disable-debug --without-javac --without-odbc --without-wx --disable-sctp --disable-megaco --disable-corba --disable-distributed --disable-hipe --disable-compiler --disable-kernel-poll"
          export ERL_FLAGS="-smp disable" # Disable SMP for xcomp build
          export ARCH="arm64" # Example ARCH, adjust if needed for xcomp
          export ANDROID_NAME="android" # Example ANDROID_NAME
          export ABI="23" # Example ABI
          export OPENSSL_VERSION="${{ steps.openssl-download.outputs.OPENSSL_VERSION }}"
          export OPENSSL_HASH="${{ steps.openssl-download.outputs.OPENSSL_HASH }}"

          #./scripts/build-otp.sh # Assuming you have a script to build OTP, adapt as needed

          mkdir _build/otp
          touch _build/otp/testfile.txt

          echo "OTP_BUILD_PATH=$PWD/_build/otp" >> "$GITHUB_OUTPUT"
          echo "::set-output name=otp_build_path::$PWD/_build/otp" # Set output variable


      - name: Upload OTP Build Artifact (Round 1)
        uses: actions/upload-artifact@v4
        with:
          name: otp-build-round1
          path: _build/otp # Or the actual path to your built OTP


  build_platform_matrix:
    name: Build Platform Slices - ${{ matrix.platform.name }}
    runs-on: macos-latest
    needs: build_setup
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]
        platform:
          - { name: "iOS", sdk: iphoneos, arch: arm64 }
          - { name: "iOS Simulator", sdk: iphonesimulator, arch: x86_64 }
          - { name: "macOS", sdk: macosx, arch: x86_64 }
          - { name: "watchOS", sdk: watchos, arch: arm64 }
          - { name: "watchOS Simulator", sdk: watchsimulator, arch: x86_64 }
          - { name: "tvOS", sdk: appletvos, arch: arm64 }
          - { name: "tvOS Simulator", sdk: appletvsimulator, arch: x86_64 }
          - { name: "visionOS", sdk: visionos, arch: arm64 }
          - { name: "visionOS Simulator", sdk: visionsimulator, arch: x86_64 }

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download OTP Build Artifact (Round 1)
        uses: actions/download-artifact@v4
        with:
          name: otp-build-round1
          path: _build/otp

    #   - name: Set up Rust Toolchain (Nightly)
    #     uses: dtolnay/rust-toolchain@nightly
    #     with:
    #       targets: ${{ matrix.platform.rust_target }}

      - name: Build NIFs for ${{ matrix.platform.name }}
        shell: bash
        run: |
          echo "Building NIFs for ${{ matrix.platform.name }} - ${{ matrix.platform.sdk }} - ${{ matrix.platform.arch }}"
          # Example: cargo build --target ${{ matrix.platform.rust_target }}

      - name: Collect NIF Artifacts for ${{ matrix.platform.name }}
        run: |
          echo "Collecting NIF Artifacts for ${{ matrix.platform.name }}"
          mkdir artifacts
          touch artifacts/nif-lib-${{ matrix.platform.name }}.a # Example: create dummy artifact
          echo "nif_artifact_path=artifacts/nif-lib-${{ matrix.platform.name }}.a" >> "$GITHUB_OUTPUT" # Corrected output setting

      - name: Build liberlang.xcframework Slice for ${{ matrix.platform.name }}
        shell: bash
        id: build-xcframework-slice
        run: |
          echo "Building liberlang.xcframework slice for ${{ matrix.platform.name }}"
          mkdir liberlang_xcframework_slice
          touch liberlang_xcframework_slice/liberlang.xcframework # Example: create dummy xcframework slice
          echo "xcframework_slice_path=liberlang_xcframework_slice/liberlang.xcframework" >> "$GITHUB_OUTPUT" # Corrected output setting

      - name: Upload liberlang.xcframework Slice Artifact for ${{ matrix.platform.name }}
        uses: actions/upload-artifact@v4
        id: upload-xcframework-slice
        with:
          name: liberlang-xcframework-slice-${{ matrix.platform.name }}
          path: ${{ steps.build-xcframework-slice.outputs.xcframework_slice_path }}

  
  combine_xcframework:
    name: Combine XC Framework
    runs-on: macos-latest
    needs: build_platform_matrix

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download liberlang.xcframework Slice Artifacts
        uses: actions/download-artifact@v4
        with: 
            path: liberlang-xcframework-slices

      - name: Create Combined xcframework
        shell: bash
        run: | 
          FRAMEWORK_NAME="liberlang"
          OUTPUT_XCFRAMEWORK="${FRAMEWORK_NAME}.xcframework" 

          IOS_FRAMEWORK="framework-slices/liberlang-xcframework-slice-iOS/liberlang.xcframework"
          SIMULATOR_FRAMEWORK="framework-slices/liberlang-xcframework-slice-iOS Simulator/liberlang.xcframework"
          MACOS_FRAMEWORK="framework-slices/liberlang-xcframework-slice-macOS/liberlang.xcframework"
          WATCHOS_FRAMEWORK="liberlang-xcframework-slices/liberlang-xcframework-slice-watchOS/liberlang.xcframework"
          WATCHOS_SIMULATOR_FRAMEWORK="liberlang-xcframework-slices/liberlang-xcframework-slice-watchOS Simulator/liberlang.xcframework"
          TVOS_FRAMEWORK="liberlang-xcframework-slices/liberlang-xcframework-slice-tvOS/liberlang.xcframework"
          TVOS_SIMULATOR_FRAMEWORK="liberlang-xcframework-slices/liberlang-xcframework-slice-tvOS Simulator/liberlang.xcframework"
          VISIONOS_FRAMEWORK="liberlang-xcframework-slices/liberlang-xcframework-slice-visionOS/liberlang.xcframework"
          VISIONOS_SIMULATOR_FRAMEWORK="liberlang-xcframework-slices/liberlang-xcframework-slice-visionOS Simulator/liberlang.xcframework"

          # Create xcframework
          echo xcodebuild -create-xcframework \
            -framework "$IOS_FRAMEWORK" \
            -framework "$SIMULATOR_FRAMEWORK" \
            -framework "$MACOS_FRAMEWORK" \
            -framework "$WATCHOS_FRAMEWORK" \
            -framework "$WATCHOS_SIMULATOR_FRAMEWORK" \
            -framework "$TVOS_FRAMEWORK" \
            -framework "$TVOS_SIMULATOR_FRAMEWORK" \
            -framework "$VISIONOS_FRAMEWORK" \
            -framework "$VISIONOS_SIMULATOR_FRAMEWORK" \
            -output "$OUTPUT_XCFRAMEWORK"

          echo lipo -info "$OUTPUT_XCFRAMEWORK/${FRAMEWORK_NAME}"
          mkdir liberlang.xcframework
          touch liberlang.xcframework/test.txt

      - name: Upload Combined xcframework Artifact
        uses: actions/upload-artifact@v4
        with:
          name: lipo
          path: liberlang.xcframework

  test_matrix:
    name: Test Matrix - ${{ matrix.platform.name }}
    runs-on: macos-latest
    needs: combine_xcframework
    strategy:
      matrix:
        os: [macos-latest]
        platform:
          - { name: "iOS Tests", sdk: iphoneos, arch: arm64 }
          - { name: "macOS Tests", sdk: macosx, arch: x86_64 }
          - { name: "watchOS Tests", sdk: watchos, arch: arm64 }
          - { name: "tvOS Tests", sdk: appletvos, arch: arm64 }
          - { name: "visionOS Tests", sdk: visionos, arch: arm64 }

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Combined xcframework Artifact
        uses: actions/download-artifact@v4
        with:
          name: lipo
          path: Combined-xcframework # Download to Combined-xcframework folder

      - name: Run Tests for ${{ matrix.platform.name }}
        shell: bash
        run: |
          echo "Running tests for ${{ matrix.platform.name }}"
          # ... (Your test execution commands for each platform) ...
          # Example: xcodebuild test -project ... -scheme ... -destination ...