name: Build Apple targets liberlang.xframework
on:
  push:
    branches:
      - main
      - refactoring
  pull_request:

env: 
    OPENSSL_VERSION: "3.4.1"
    OPENSSL_HASH: "002a2d6b30b58bf4bea46c43bdd96365aaf8daa6c428782aa4feee06da197df3"
  
jobs:
          
  build_setup:
    name: Setup Dependencies
    runs-on: macos-latest
    env:
      FRAMEWORK_NAME: "liberlang"
    outputs:
      otp_build_path: ${{ steps.otp-setup.outputs.otp_build_path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        #   - name: Set up ASDF Erlang/Elixir
        #     uses: erlef/setup-beam@v1
        #     with:
        #       otp-version: "27.2"
        #       elixir-version: "1.16.3"
      - name: Cache ASDF and Toolchains
        uses: actions/cache@v4
        id: asdf-cache
        with:
          path: ~/.asdf
          key: asdf-cache-${{ runner.os }}-${{ hashFiles('.tool-versions') }}
          restore-keys: |
            asdf-cache-${{ runner.os }}-
      
      - name: Cache Openssl source
        uses: actions/cache@v4
        id: openssl-cache
        with:
          path: |
            openssl-${{ env.OPENSSL_VERSION }}
          key: openssl-source-cache-${{ env.OPENSSL_VERSION }}

      - name: Install Dependencies (Mix deps)
        if: false
        run: echo mix deps.get && mix deps.compile
      - name: Download and Extract OpenSSL
        if: steps.openssl-cache.outputs.cache-hit != 'true'
        id: openssl-download
        run: |
          OPENSSL_VERSION="3.4.1"
          OPENSSL_HASH="002a2d6b30b58bf4bea46c43bdd96365aaf8daa6c428782aa4feee06da197df3"

          wget "https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz"
          # echo "$OPENSSL_HASH  openssl-$OPENSSL_VERSION.tar.gz" | sha256sum -c
          tar xzf openssl-$OPENSSL_VERSION.tar.gz

          ls -lah ${{github.workspace}}/openssl-$OPENSSL_VERSION

          echo "OPENSSL_VERSION=$OPENSSL_VERSION" >> "$GITHUB_OUTPUT"
          echo "OPENSSL_HASH=$OPENSSL_HASH" >> "$GITHUB_OUTPUT"
          echo "OPENSSL_PATH=$PWD/openssl-$OPENSSL_VERSION" >> "$GITHUB_OUTPUT"

  build_platform_matrix:
    name: Build Platform Slices - ${{ matrix.platform.name }}
    runs-on: macos-latest
    needs: build_setup
    
    strategy:
      fail-fast: false
      matrix:
        erlixir:
          - { otp-version: 27.2.4, elixir-version: 1.18.2, erl-opts: "--disable-year2038"} # configured in package_ios_runtime.ex too configuration
          #- { otp-version: 26.2.5.6, elixir-version: 1.16.3 }
          # - { otp-version: 26.2.5.6, elixir-version: 1.18.2 }
        os: [macos-latest]
        platform:
          - {name: "iOS", sdk: iphoneos, arch: arm64, openssl_arch: "ios64-xcrun", otp_arch: "aarch64-apple-ios", xcomp: "arm64-ios"}
          - {name: "iOS Simulator", sdk: iphonesimulator, arch: x86_64, openssl_arch: "iossimulator-x86_64-xcrun", xcomp: "x86_64-iossimulator"}
          # - {name: "macOS", sdk: macosx, arch: x86_64, openssl_arch: "darwin64-arm64"}
          - {name: "watchOS", sdk: watchos, arch: arm64, openssl_arch: "ios64-xcrun", otp_arch: "aarch64-apple-ios", xcomp: "arm64-ios"}
          - {name: "watchOS Simulator", sdk: watchsimulator, arch: x86_64, openssl_arch: "iossimulator-x86_64-xcrun", xcomp: "x86_64-iossimulator"}
        #   - {name: "tvOS", sdk: appletvos, arch: arm64, openssl_arch: "ios64-xcrun"}
        #   - {name: "tvOS Simulator", sdk: appletvsimulator, arch: x86_64, openssl_arch: "iossimulator-x86_64-xcrun", xcomp: "x86_64-iossimulator"}
        #   - {name: "visionOS", sdk: visionos, arch: arm64, openssl_arch: "ios64-xcrun"}
        #   - {name: "visionOS Simulator", sdk: visionsimulator, arch: x86_64, openssl_arch: "iossimulator-x86_64-xcrun", xcomp: "x86_64-iossimulator"}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Cache Openssl source
        uses: actions/cache@v4
        id: openssl-source-cache
        with:
          path: |
            openssl-${{ env.OPENSSL_VERSION }}
          key: openssl-source-cache-${{ env.OPENSSL_VERSION }}

      - name: Cache Openssl builds
        uses: actions/cache@v4
        id: openssl-build-cache
        with:
          path: |
            _build/openssl-${{ env.OPENSSL_VERSION }}
          key: openssl-build-cache-${{ env.OPENSSL_VERSION }}-${{ runner.os }}-${{ matrix.platform.arch }}
          # -${{ hashFiles('./scripts/install_openssl_new.sh') }}
          # #openssl-build-cache-${{ env.OPENSSL_VERSION }}-${{ runner.os }}-${{ matrix.platform.arch }}-
          restore-keys: |
            openssl-build-cache-${{ env.OPENSSL_VERSION }}-${{ runner.os }}-
            openssl-build-cache-${{ env.OPENSSL_VERSION }}-

      - name: Build OpenSSL
        id: openssl-build
        if: steps.openssl-build-cache.outputs.cache-hit != 'true'
        run: |
          cd openssl-${{ env.OPENSSL_VERSION }}
          echo "OPENSSL_PREFIX=_build/openssl-$OPENSSL_VERSION" >> "$GITHUB_ENV"
          ARCH=${{ matrix.platform.openssl_arch }} MAKEFLAGS="-j10 -O" OPENSSL_PREFIX=${{ github.workspace }}/_build/openssl-${{ env.OPENSSL_VERSION }} ../scripts/install_openssl_new.sh

      - name: Configure erl options
        if: ${{ matrix.erlixir.erl-opts }} != ''
        run: |
          # echo KERL_CONFIGURE_OPTIONS="${{matrix.erlixir.erl-opts}}" >> "$GITHUB_ENV"
          # used for hashing cache key
          echo "${{matrix.erlixir.erl-opts}}" > .kerl_configuration_options

      - name: Setup asdf .tool-versions
        id: asdf-setup
        run: |
          echo "" > .tool-versions
          echo "erlang ${{matrix.erlixir.otp-version}}" >> .tool-versions
          echo "elixir ${{matrix.erlixir.elixir-version}}" >> .tool-versions
          # echo PATH="$HOME/.asdf/shims:$HOME/.asdf/bin:$PATH" >> "$GITHUB_ENV"

      - name: Setup asdf
        uses: asdf-vm/actions/setup@master

      - name: asdf cache
        id: asdf-cache
        uses: actions/cache@v4
        with:
          path: ~/.asdf/
          key: ${{ runner.os }}-${{ hashFiles('**/.tool-versions', '.kerl_configuration_options') }}

      - name: Install CD tools from .tool-versions
        continue-on-error: true
        if: steps.asdf-cache.outputs.cache-hit != 'true'
        uses: asdf-vm/actions/install@master

      - name: Test asdf tools
        id: asdf-test
        run: |
          erl -version
          elixir --version
          mix --version
      - name: OTP Cache
        uses: actions/cache@v3
        id: otp-cache
        with:
          path: |
            otp_src_${{matrix.erlixir.otp-version}}
            _build/otp
          key: macos-otp-${{ matrix.platform.name }}-${{ matrix.erlixir.otp-version }}-erl-opts-${{matrix.erlixir.erl-opts }}
          restore-keys: |
            macos-otp-${{ matrix.platform.name }}-${{ matrix.erlixir.otp-version }}-
            macos-otp-
      
      - name: Download OTP 
        shell: bash
        if: steps.otp-cache.outputs.cache-hit != 'true'
        run: | 
          curl -L -O https://github.com/erlang/otp/releases/download/OTP-${{matrix.erlixir.otp-version}}/otp_src_${{matrix.erlixir.otp-version}}.tar.gz
          tar -xzf otp_src_${{matrix.erlixir.otp-version}}.tar.gz

      - name: Setup OTP env
        shell: bash
        run: |
          echo export KERL_CONFIGURE_OPTIONS="${{matrix.erlixir.kerl-opts}} --disable-debug --without-javac --without-odbc --without-wx --disable-sctp --disable-megaco --disable-corba --disable-hipe --disable-compiler --disable-kernel-poll" >> $GITHUB_ENV
          echo export ERL_FLAGS="-smp disable" >> $GITHUB_ENV
          echo ARCH=${{ matrix.platform.openssl_arch }} >> $GITHUB_ENV
          echo OPENSSL_PREFIX=$(pwd)/_build/openssl-${{ env.OPENSSL_VERSION }} >> $GITHUB_ENV
          echo OTP_PREFIX=$(pwd)/_build/otp >> $GITHUB_ENV
          echo LIBS="$(pwd)/_build/openssl-${{ env.OPENSSL_VERSION }}/lib/libcrypto.a" >> $GITHUB_ENV
          echo INSTALL_PROGRAM="/usr/bin/install -c" >> $GITHUB_ENV
          echo MAKEFLAGS="-j10 -O" >> $GITHUB_ENV
          echo RELEASE_LIBBEAM="yes" >> $GITHUB_ENV
          # echo STATIC_NIFS="$(pwd)/_build/otp/lib/asn1/priv/lib/${{ matrix.platform.otp_arch }}/asn1rt_nif.a,$(pwd)/_build/otp/lib/crypto/priv/lib/${{ matrix.platform.otp_arch }}/crypto.a" >> $GITHUB_ENV
          # echo CC="$(xcrun --sdk ${{ matrix.platform.sdk }} --find clang) -isysroot $(xcrun --sdk ${{ matrix.platform.sdk }} --show-sdk-path) $CC" >> $GITHUB_ENV
          # echo CFLAGS="-isysroot $(xcrun --sdk ${{ matrix.platform.sdk }} --show-sdk-path) -arch ${{ matrix.platform.arch }} $CFLAGS" >> $GITHUB_ENV
          # echo LDFLAGS="-syslibroot $(xcrun --sdk ${{ matrix.platform.sdk }} --show-sdk-path) -arch ${{ matrix.platform.arch }} $LDFLAGS" >> $GITHUB_ENV

      - name: Build OTP Round 1 (xcomp)
        id: otp-setup
        if: steps.otp-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          ls -lah _build/openssl-$OPENSSL_VERSION
          ls -lah $OPENSSL_PREFIX

          find . -name libcrypto.a

          echo $CC

          echo "$OPENSSL_PREFIX/lib/libcrypto.a"
          ls -lah "$OPENSSL_PREFIX/lib/libcrypto.a"

          echo $STATIC_NIFS

          echo `lipo -info $LIBS` || 1

          # exit 0

          echo `env` > /tmp/otp_cmd.sh

          echo cd otp_src_${{matrix.erlixir.otp-version}} \
          ./otp_build configure \
          --prefix="$OTP_PREFIX" \
          --with-ssl="$OPENSSL_PREFIX" \
          --disable-dynamic-ssl-lib \
          --xcomp-conf=xcomp/erl-xcomp-${{ matrix.platform.xcomp }}.conf \
          --enable-static-nifs="$STATIC_NIFS" >> /tmp/otp_cmd.sh

          cd otp_src_${{matrix.erlixir.otp-version}}
          ./otp_build configure \
          --prefix="$OTP_PREFIX" \
          --with-ssl="$OPENSSL_PREFIX" \
          --disable-dynamic-ssl-lib \
          --xcomp-conf=xcomp/erl-xcomp-${{ matrix.platform.xcomp }}.conf \
          --enable-static-nifs="$STATIC_NIFS"
          
          ./otp_build boot -a
          ./otp_build release -a
          
          #./scripts/build-otp.sh # Assuming you have a script to build OTP, adapt as needed

          cd ${{ github.workspace }}

          mkdir -p _build/otp
          touch _build/otp/testfile.txt

          echo "OTP_BUILD_PATH=$PWD/_build/otp" >> "$GITHUB_OUTPUT"
          echo "::set-output name=otp_build_path::$PWD/_build/otp" # Set output variable
      # - name: Download OTP Build Artifact (Round 1)
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: otp-build-round1
      #     path: _build/otp
      #   - name: Set up Rust Toolchain (Nightly)
      #     uses: dtolnay/rust-toolchain@nightly
      #     with:
      #       targets: ${{ matrix.platform.rust_target }}
      - name: Build NIFs for ${{ matrix.platform.name }}
        shell: bash
        run: |
          echo "Building NIFs for ${{ matrix.platform.name }} - ${{ matrix.platform.sdk }} - ${{ matrix.platform.arch }}"
          # Example: cargo build --target ${{ matrix.platform.rust_target }}
      - name: Collect NIF Artifacts for ${{ matrix.platform.name }}
        run: |
          echo "Collecting NIF Artifacts for ${{ matrix.platform.name }}"
          mkdir artifacts
          touch artifacts/nif-lib-${{ matrix.platform.name }}.a # Example: create dummy artifact
          echo "nif_artifact_path=artifacts/nif-lib-${{ matrix.platform.name }}.a" >> "$GITHUB_OUTPUT" # Corrected output setting
      - name: Build liberlang.xcframework Slice for ${{ matrix.platform.name }}
        shell: bash
        id: build-xcframework-slice
        run: |
          echo "Building liberlang.xcframework slice for ${{ matrix.platform.name }}"
          mkdir liberlang_xcframework_slice
          touch liberlang_xcframework_slice/liberlang.xcframework # Example: create dummy xcframework slice
          echo "xcframework_slice_path=liberlang_xcframework_slice/liberlang.xcframework" >> "$GITHUB_OUTPUT" # Corrected output setting
      - name: Upload liberlang.xcframework Slice Artifact for ${{ matrix.platform.name }}
        uses: actions/upload-artifact@v4
        id: upload-xcframework-slice
        with:
          name: liberlang-xcframework-slice-${{ matrix.platform.name }}
          path: ${{ steps.build-xcframework-slice.outputs.xcframework_slice_path }}
  combine_xcframework:
    name: Combine XC Framework
    runs-on: macos-latest
    needs: build_platform_matrix
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download liberlang.xcframework Slice Artifacts
        uses: actions/download-artifact@v4
        with:
          path: liberlang-xcframework-slices
      - name: Create Combined xcframework
        shell: bash
        run: "FRAMEWORK_NAME=\"liberlang\"\nOUTPUT_XCFRAMEWORK=\"${FRAMEWORK_NAME}.xcframework\" \n\nIOS_FRAMEWORK=\"framework-slices/liberlang-xcframework-slice-iOS/liberlang.xcframework\"\nSIMULATOR_FRAMEWORK=\"framework-slices/liberlang-xcframework-slice-iOS Simulator/liberlang.xcframework\"\nMACOS_FRAMEWORK=\"framework-slices/liberlang-xcframework-slice-macOS/liberlang.xcframework\"\nWATCHOS_FRAMEWORK=\"liberlang-xcframework-slices/liberlang-xcframework-slice-watchOS/liberlang.xcframework\"\nWATCHOS_SIMULATOR_FRAMEWORK=\"liberlang-xcframework-slices/liberlang-xcframework-slice-watchOS Simulator/liberlang.xcframework\"\nTVOS_FRAMEWORK=\"liberlang-xcframework-slices/liberlang-xcframework-slice-tvOS/liberlang.xcframework\"\nTVOS_SIMULATOR_FRAMEWORK=\"liberlang-xcframework-slices/liberlang-xcframework-slice-tvOS Simulator/liberlang.xcframework\"\nVISIONOS_FRAMEWORK=\"liberlang-xcframework-slices/liberlang-xcframework-slice-visionOS/liberlang.xcframework\"\nVISIONOS_SIMULATOR_FRAMEWORK=\"liberlang-xcframework-slices/liberlang-xcframework-slice-visionOS Simulator/liberlang.xcframework\"\n\n# Create xcframework\necho xcodebuild -create-xcframework \\\n  -framework \"$IOS_FRAMEWORK\" \\\n  -framework \"$SIMULATOR_FRAMEWORK\" \\\n  -framework \"$MACOS_FRAMEWORK\" \\\n  -framework \"$WATCHOS_FRAMEWORK\" \\\n  -framework \"$WATCHOS_SIMULATOR_FRAMEWORK\" \\\n  -framework \"$TVOS_FRAMEWORK\" \\\n  -framework \"$TVOS_SIMULATOR_FRAMEWORK\" \\\n  -framework \"$VISIONOS_FRAMEWORK\" \\\n  -framework \"$VISIONOS_SIMULATOR_FRAMEWORK\" \\\n  -output \"$OUTPUT_XCFRAMEWORK\"\n\necho lipo -info \"$OUTPUT_XCFRAMEWORK/${FRAMEWORK_NAME}\"\nmkdir liberlang.xcframework\ntouch liberlang.xcframework/test.txt\n"
      - name: Upload Combined xcframework Artifact
        uses: actions/upload-artifact@v4
        with:
          name: lipo
          path: liberlang.xcframework
  test_matrix:
    name: Test Matrix - ${{ matrix.platform.name }}
    runs-on: macos-latest
    needs: combine_xcframework
    strategy:
      matrix:
        os: [macos-latest]
        platform:
          - {name: "iOS Tests", sdk: iphoneos, arch: arm64}
          - {name: "macOS Tests", sdk: macosx, arch: x86_64}
          - {name: "watchOS Tests", sdk: watchos, arch: arm64}
          - {name: "tvOS Tests", sdk: appletvos, arch: arm64}
          - {name: "visionOS Tests", sdk: visionos, arch: arm64}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download Combined xcframework Artifact
        uses: actions/download-artifact@v4
        with:
          name: lipo
          path: Combined-xcframework # Download to Combined-xcframework folder
      - name: Run Tests for ${{ matrix.platform.name }}
        shell: bash
        run: |-
          echo "Running tests for ${{ matrix.platform.name }}"
          # ... (Your test execution commands for each platform) ...
          # Example: xcodebuild test -project ... -scheme ... -destination ...
