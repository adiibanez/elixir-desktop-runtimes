name: Build Apple targets liberlang.xframework
on:
  push:
    branches:
      - main
      - refactoring
  pull_request:
env:
  OPENSSL_VERSION: "3.4.1"
  OPENSSL_HASH: "002a2d6b30b58bf4bea46c43bdd96365aaf8daa6c428782aa4feee06da197df3"
  IPHONEOS_DEPLOYMENT_TARGET: 14.0
  #CFLAGS: "-miphoneos-version-min=14.0"
  #LDFLAGS: "-miphoneos-version-min=14.0"
  # MACOSX_DEPLOYMENT_TARGET: 11.0
  # IPHONEOS_DEPLOYMENT_TARGET: 10.0
  # IPHONEOS_DEPLOYMENT_TARGET: 14.0
  # IPHONEOS_DEPLOYMENT_TARGET: 14.0
  # MACOSX_DEPLOYMENT_TARGET: 10.12
  # IPHONEOS_DEPLOYMENT_TARGET: 10.0
  # IPHONEOS_DEPLOYMENT_TARGET: 13.1

  # OPENSSL_VERSION: 1.1.1
  # OPENSSL_HASH: "d6697e2871e77238460402e9362d47d18382b15ef9f246aba6c7bd780d38a6b0"

jobs:
  build_setup:
    name: Setup Dependencies
    runs-on: macos-latest
    env:
      FRAMEWORK_NAME: "liberlang"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Cache ASDF and Toolchains
        uses: actions/cache@v4
        id: asdf-cache
        with:
          path: ~/.asdf
          key: asdf-cache-${{ runner.os }}-${{ hashFiles('.tool-versions') }}
          restore-keys: |
            asdf-cache-${{ runner.os }}-
      - name: Cache Openssl source
        uses: actions/cache@v4
        id: openssl-cache
        with:
          path: |
            openssl-${{ env.OPENSSL_VERSION }}
          key: openssl-source-cache-${{ env.OPENSSL_VERSION }}
      - name: Download and Extract OpenSSL
        if: steps.openssl-cache.outputs.cache-hit != 'true'
        id: openssl-download
        run: |
          wget "https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz"
          # echo "$OPENSSL_HASH  openssl-$OPENSSL_VERSION.tar.gz" | sha256sum -c
          tar xzf openssl-$OPENSSL_VERSION.tar.gz
          ls -lah ${{github.workspace}}/openssl-$OPENSSL_VERSION

          echo "OPENSSL_VERSION=$OPENSSL_VERSION" >> "$GITHUB_OUTPUT"
          echo "OPENSSL_HASH=$OPENSSL_HASH" >> "$GITHUB_OUTPUT"
          echo "OPENSSL_PATH=$PWD/openssl-$OPENSSL_VERSION" >> "$GITHUB_OUTPUT"
  build_platform_matrix:
    name: Build - ${{ matrix.platform.name }} OTP-${{ matrix.erlixir.otp-version }} ELX-${{ matrix.erlixir.elixir-version }}
    runs-on: macos-latest
    needs: build_setup
    strategy:
      fail-fast: false
      matrix:
        erlixir:
          # - {otp-version: 28.0-rc1, elixir-version: 1.18.3-otp-27, use-git: true }
          - {otp-version: 27.2.4, elixir-version: 1.18.2, erl-opts: "--disable-year2038"} # configured in package_ios_runtime.ex too configuration
          #- { otp-version: 26.2.5.6, elixir-version: 1.16.3 }
          # - { otp-version: 26.2.5.6, elixir-version: 1.18.2 }
        os: [macos-latest]
        platform:
          # # - {name: "macOS", sdk: macosx, arch: x86_64, openssl_arch: "darwin64-arm64"}
          - {id: "ios", name: "iOS", sdk: iphoneos, arch: arm64, openssl_arch: "ios64-xcrun", otp_arch: "aarch64-apple-ios", xcomp: "arm64-ios"}
          # - {id: "ios_sim", name: "iOS Simulator", sdk: iphonesimulator, arch: x86_64, openssl_arch: "iossimulator-x86_64-xcrun", xcomp: "x86_64-iossimulator"}
          # - {id: "watchos", name: "watchOS", sdk: watchos, arch: arm64, openssl_arch: "ios64-xcrun", otp_arch: "aarch64-apple-ios", xcomp: "arm64-ios"}
          # - {id: "watchos_sim", name: "watchOS Simulator", sdk: watchsimulator, arch: x86_64, openssl_arch: "iossimulator-x86_64-xcrun", xcomp: "x86_64-iossimulator"}
          # - {id: "tvos", name: "tvOS", sdk: appletvos, arch: arm64, openssl_arch: "ios64-xcrun", otp_arch: "aarch64-apple-ios", xcomp: "arm64-ios"}
          # - {id: "tvos_sim", name: "tvOS Simulator", sdk: appletvsimulator, arch: x86_64, openssl_arch: "iossimulator-x86_64-xcrun", xcomp: "x86_64-iossimulator"}
          # - {id: "visionos", name: "visionOS", sdk: visionos, arch: arm64, openssl_arch: "ios64-xcrun", otp_arch: "aarch64-apple-ios", xcomp: "arm64-ios"}
          # - {id: "visionos_sim", name: "visionOS Simulator", sdk: visionsimulator, arch: x86_64, openssl_arch: "iossimulator-x86_64-xcrun", xcomp: "x86_64-iossimulator"}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Cache Openssl source
        uses: actions/cache@v4
        id: openssl-source-cache
        with:
          path: |
            openssl-${{ env.OPENSSL_VERSION }}
          key: openssl-source-cache-${{ env.OPENSSL_VERSION }}
      - name: Cache Openssl builds
        uses: actions/cache@v4
        id: openssl-build-cache
        with:
          path: |
            _build/openssl-${{ env.OPENSSL_VERSION }}
          key: openssl-build-cache-${{ env.OPENSSL_VERSION }}-${{ runner.os }}-${{ matrix.platform.arch }}
          # -${{ hashFiles('./scripts/install_openssl_new.sh') }}
          # #openssl-build-cache-${{ env.OPENSSL_VERSION }}-${{ runner.os }}-${{ matrix.platform.arch }}-
          restore-keys: |
            openssl-build-cache-${{ env.OPENSSL_VERSION }}-${{ runner.os }}-
            openssl-build-cache-${{ env.OPENSSL_VERSION }}-


      - name: setup build env
        shell: bash
        run: |
              echo CC="$(xcrun --sdk ${{ matrix.platform.sdk }} --find clang) -isysroot $(xcrun --sdk ${{ matrix.platform.sdk }} --show-sdk-path)" >> $GITHUB_ENV
              echo CFLAGS="-O2 -g -isysroot $(xcrun --sdk ${{ matrix.platform.sdk }} --show-sdk-path) -arch ${{ matrix.platform.arch }}" >> $GITHUB_ENV
              echo KERL_CONFIGURE_OPTIONS="${{matrix.erlixir.kerl-opts}} --disable-debug --without-javac --without-odbc --without-wx --disable-sctp --disable-megaco --disable-corba --disable-hipe --disable-compiler --disable-kernel-poll" >> $GITHUB_ENV
              echo ERL_FLAGS="-smp disable" >> $GITHUB_ENV
              echo ARCH=${{ matrix.platform.openssl_arch }} >> $GITHUB_ENV
              echo OPENSSL_PREFIX=$(pwd)/_build/openssl-${{ env.OPENSSL_VERSION }} >> $GITHUB_ENV
              echo OTP_PREFIX=$(pwd)/_build/otp >> $GITHUB_ENV
              echo LIBS="$(pwd)/_build/openssl-${{ env.OPENSSL_VERSION }}/lib/libcrypto.a" >> $GITHUB_ENV
              # echo INSTALL_PROGRAM="/usr/bin/install -c" >> $GITHUB_ENV
              echo MAKEFLAGS="-j10 -O" >> $GITHUB_ENV
              echo RELEASE_LIBBEAM="yes" >> $GITHUB_ENV
              # echo RELEASE_ROOT=$(pwd)/_build/otp >> $GITHUB_ENV
              # echo STATIC_NIFS="$(pwd)/_build/otp/lib/asn1/priv/lib/${{ matrix.platform.otp_arch }}/asn1rt_nif.a,$(pwd)/_build/otp/lib/crypto/priv/lib/${{ matrix.platform.otp_arch }}/crypto.a" >> $GITHUB_ENV
              
      - name: Build OpenSSL
        id: openssl-build
        if: steps.openssl-build-cache.outputs.cache-hit != 'true'
        run: |
          cd openssl-${{ env.OPENSSL_VERSION }}
          echo "OPENSSL_PREFIX=_build/openssl-$OPENSSL_VERSION" >> "$GITHUB_ENV"
          MAKEFLAGS="-j10 -O" ARCH=${{ matrix.platform.openssl_arch }} OPENSSL_PREFIX=${{ github.workspace }}/_build/openssl-${{ env.OPENSSL_VERSION }} ../scripts/install_openssl_new.sh
      - name: Configure erl options
        if: ${{ matrix.erlixir.erl-opts }} != ''
        run: |
          # echo KERL_CONFIGURE_OPTIONS="${{matrix.erlixir.erl-opts}}" >> "$GITHUB_ENV"
          # used for hashing cache key
          echo "${{matrix.erlixir.erl-opts}}" > .kerl_configuration_options
      - name: Setup asdf .tool-versions
        id: asdf-setup
        run: |
          echo "" > .tool-versions
          echo "erlang ${{matrix.erlixir.otp-version}}" >> .tool-versions
          echo "elixir ${{matrix.erlixir.elixir-version}}" >> .tool-versions
          echo PATH="$HOME/.asdf/shims:$HOME/.asdf/bin:$PATH" >> "$GITHUB_ENV"
      - name: Setup asdf
        uses: asdf-vm/actions/setup@master
      - name: asdf cache
        id: asdf-cache
        uses: actions/cache@v4
        with:
          path: ~/.asdf/
          key: ${{ runner.os }}-${{ hashFiles('**/.tool-versions', '.kerl_configuration_options') }}
      - name: Install CD tools from .tool-versions
        continue-on-error: true
        if: steps.asdf-cache.outputs.cache-hit != 'true'
        uses: asdf-vm/actions/install@master
      - name: Test asdf tools
        id: asdf-test
        run: |
          erl -version
          elixir --version
          mix --version
      - name: OTP Cache
        uses: actions/cache@v3
        id: otp-cache
        with:
          path: |
            otp_src_${{matrix.erlixir.otp-version}}
            _build/otp
            _build/otp_builder
          key: macos-otp-${{ matrix.platform.id }}-${{ matrix.erlixir.otp-version }}-erl-opts-${{matrix.erlixir.erl-opts }}
          restore-keys: |
            macos-otp-${{ matrix.platform.id }}-${{ matrix.erlixir.otp-version }}-
            macos-otp-
      # - name: Clone OTP git
      #   shell: bash
      #   if: ${{ matrix.erlixir.use_git == true }} && steps.otp-cache.outputs.cache-hit != 'true'
      #   run: |
      #     git clone --depth 1 https://github.com/erlang/otp --branch OTP-${{matrix.erlixir.otp-version}} otp_src_${{matrix.erlixir.otp-version}}
      - name: Download OTP 
        shell: bash
        if: steps.otp-cache.outputs.cache-hit != 'true'
        run: |
          USE_GIT="${{ matrix.erlixir.use-git }}"
            
          if [[ "$USE_GIT" == "true" ]]; then 
            git clone --depth 1 https://github.com/erlang/otp --branch OTP-${{matrix.erlixir.otp-version}} otp_src_${{matrix.erlixir.otp-version}}
          else 
            curl -L -O https://github.com/erlang/otp/releases/download/OTP-${{matrix.erlixir.otp-version}}/otp_src_${{matrix.erlixir.otp-version}}.tar.gz
            tar -xzf otp_src_${{matrix.erlixir.otp-version}}.tar.gz
          fi
      
      - name: Build OTP Round 1 (xcomp)
        id: otp-setup
        # if: steps.otp-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          ls -lah _build/openssl-$OPENSSL_VERSION
          ls -lah $OPENSSL_PREFIX

          find . -name libcrypto.a

          echo $CC

          export LIBTOOL="xcrun -sdk ${{ matrix.platform.sdk }} libtool",

          echo "$OPENSSL_PREFIX/lib/libcrypto.a"
          ls -lah "$OPENSSL_PREFIX/lib/libcrypto.a"

          echo $STATIC_NIFS

          echo `lipo -info $LIBS` || 1

          # exit 0

          mkdir -p _build/otp

          cp -r otp_src_${{matrix.erlixir.otp-version}} _build/otp_builder

          echo `env` > /tmp/otp_cmd.sh

          # echo cd _build/otp_builder \
          # ./otp_build configure \
          # --with-ssl="$OPENSSL_PREFIX" \
          # --disable-dynamic-ssl-lib \
          # --xcomp-conf=xcomp/erl-xcomp-${{ matrix.platform.xcomp }}.conf \
          # --enable-static-nifs="$STATIC_NIFS" >> /tmp/otp_cmd.sh

          export LIBS=${OPENSSL_PREFIX}/lib/libcrypto.a

          cd _build/otp_builder
          ./otp_build configure \
          --with-ssl="$OPENSSL_PREFIX" \
          --disable-dynamic-ssl-lib \
          --xcomp-conf=xcomp/erl-xcomp-${{ matrix.platform.xcomp }}.conf 

          # --enable-static-nifs="$STATIC_NIFS" \
          
          ./otp_build boot -a
          ./otp_build release -a

          ls -lah $OTP_PREFIX

          cd ${{ github.workspace }}

      - name: Combine static OTP libs
        continue-on-error: false
        shell: bash
        run: |
          cd _build/otp_builder

          # find . -name libbeam.a
          # find . -name libcrypto.a
          INCLUDE_PATTERN="lib/libbeam.a|libz.a|libcrypto.a|_r.a|_s.a"
          # https://askubuntu.com/questions/444551/get-absolute-path-of-files-using-find-command

          find ~+ -type f -name "*.a" | grep -E $INCLUDE_PATTERN | awk '{print " ls -alh " $1}' | sh
          LIBS=`find ~+ -type f -name "*.a" | grep -E $INCLUDE_PATTERN | awk '{printf " %s", $1} END { print "" }'`
          echo $LIBS

          # xcrun -sdk ${{matrix.platform.sdk}} 
          libtool -static -o ${{ github.workspace }}/_build/liberlang_OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}.a $LIBS

          # lipo -thin ${{matrix.platform.arch}} temp_liberlang.a

          lipo -info ${{ github.workspace }}/_build/liberlang_OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}.a
          
      - name: Upload liberlang.a Artifact for ${{ matrix.platform.name }}
        uses: actions/upload-artifact@v4
        with:
          name: libs-OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}-${{ matrix.platform.id }}-liberlang
          path: _build/liberlang_OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}.a
      
      - name: Set up Rust Toolchain (Nightly)
        uses: dtolnay/rust-toolchain@nightly
        with:
          targets: ${{ matrix.platform.rust_target }}

      - name: Build NIFs for ${{ matrix.platform.name }} OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}
        shell: bash
        env: 
          RUSTLER_BTLEPLUG_BUILD: 1
          WASMEX_BUILD: 1
          RUST_TARGET: ${{ matrix.platform.otp_arch }}
          RUSTFLAGS: "-C target-feature=+crt-static"
        run: |
          echo "Building NIFs for ${{ matrix.platform.name }} - ${{ matrix.platform.sdk }} - ${{ matrix.platform.arch }}"

          mkdir -p _build/nifs/
          cd _build/nifs/

          # git clone --depth 1 https://github.com/elixir-desktop/exqlite.git
          # cd exqlite
          # mix deps.get
          # mix release
          # cd ..

          # git clone --depth 1 https://github.com/diodechain/libsecp256k1.git
          # cd libsecp256k1
          # mix deps.get
          # mix release
          # cd ..

          git clone --depth 1 https://github.com/adiibanez/rustler_btleplug.git --branch v0.0.15-alpha
          cd rustler_btleplug
          mix deps.get
          mix release
          cd ..

          # git clone --depth 1 https://github.com/adiibanez/wasmex.git --branch main
          # cd wasmex
          # mix deps.get
          # mix release
          # cd ..

          # git clone --depth 1 https://github.com/adiibanez/explorer.git --branch main
          # cd explorer
          # mix deps.get
          # mix release
          # cd ..

          cd ${{ github.workspace }}

          find _build/nifs -type f -name "*.a"

      - name: Upload Nifs for ${{ matrix.platform.name }} OTP-${{matrix.erlixir.otp-version}} ELX-${{matrix.erlixir.elixir-version}}
        uses: actions/upload-artifact@v4
        with:
          name: libs-OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}-${{ matrix.platform.id }}-nifs
          path: |
            _build/nifs/**/**.a

      # - name: Download liberlang  ${{ matrix.platform.name }} OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: libs-OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}-${{ matrix.platform.id }}-liberlang
      #     path: libs

      - name: Download Libs for ${{ matrix.platform.name }} OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}
        uses: actions/download-artifact@v4
        with:
          pattern: libs-OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}-${{ matrix.platform.id }}-*
          path: _build/libs
          merge-multiple: true

      - name: Build liberlang.xcframework Slice for ${{ matrix.platform.name }} OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}
        shell: bash
        id: build-xcframework-slice
        run: |
          # ls -lah _build/libs/
          # du -sh _build/libs/
          # find _build/libs -name "*.a"
          # find _build/libs *

          #INCLUDE_PATTERN="lib/libbeam.a|libz.a|libcrypto.a|_r.a|_s.a"
          #INCLUDE_PATTERN="liberlang_OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}.a|.a"
          INCLUDE_PATTERN="liberlang_OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}.a|release/*.a"
          
          # libtool -static -o ${{ github.workspace }}/_build/liberlang_OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}.a $LIBS

          echo LOOKUP_LIBS for liberlang.xcframework Slice

          # find ~+ -type f -name "*.a" | grep -E $INCLUDE_PATTERN | awk '{print " ls -alh " $1}' | sh
          # LIBS=`find ~+ -type f -name "*.a" | grep -E $INCLUDE_PATTERN | awk '{printf " -library %s", $1} END { print "" }'`
          find ${{ github.workspace }}/_build/libs -type f -name "*.a" | grep -E $INCLUDE_PATTERN | awk '{print " ls -alh " $1}' | sh
          LIBS=`find ${{ github.workspace }}/_build/libs -type f -name "*.a" | grep -E $INCLUDE_PATTERN | awk '{printf " -library %s", $1} END { print "" }'`
          echo $LIBS
          # libtool -static -o ${{ github.workspace }}/_build/liberlang_OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}.a $LIBS

          echo "Building liberlang.xcframework slice for ${{ matrix.platform.name }}"
          mkdir liberlang_xcframework_slice-OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}-${{ matrix.platform.id }}

          cd liberlang_xcframework_slice-OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}-${{ matrix.platform.id }}

          xcodebuild -create-xcframework \
            -output liberlang.xcframework \
            $LIBS

          echo "xcframework_slice_path=liberlang_xcframework_slice-OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}-${{ matrix.platform.id }}" >> "$GITHUB_OUTPUT"

      - name: Upload liberlang.xcframework Slice Artifact for ${{ matrix.platform.name }}
        uses: actions/upload-artifact@v4
        id: upload-xcframework-slice
        with:
          name: liberlang-xcframework-slice-OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}-${{ matrix.platform.id }}
          path: ${{ steps.build-xcframework-slice.outputs.xcframework_slice_path }}
  combine_xcframework:
    if: false
    name: Combine XC Framework
    runs-on: macos-latest
    needs: build_platform_matrix
    strategy:
      fail-fast: false
      matrix:
        erlixir:
          # - {otp-version: 28.0-rc1, elixir-version: 1.18.3-otp-27, git: true }
          - {otp-version: 27.2.4, elixir-version: 1.18.2, erl-opts: "--disable-year2038"} # configured in package_ios_runtime.ex too configuration
          #- { otp-version: 26.2.5.6, elixir-version: 1.16.3 }
          # - { otp-version: 26.2.5.6, elixir-version: 1.18.2 }
        os: [macos-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download liberlang.xcframework Slice Artifacts
        uses: actions/download-artifact@v4
        with:
          path: xcframework-slices
          pattern: liberlang-xcframework-slice-OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}-*
          # merge-multiple: true

      - name: Setup Combined xcframework env
        shell: bash
        run: |
          echo "IOS_FRAMEWORK=xcframework-slices/liberlang-xcframework-slice-ios-OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}/liberlang.xcframework" >> $GITHUB_ENV
          echo "SIMULATOR_FRAMEWORK=xcframework-slices/liberlang-xcframework-slice-ios_sim-OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}/liberlang.xcframework" >> $GITHUB_ENV
          echo "WATCHOS_FRAMEWORK=xcframework-slices/liberlang-xcframework-slice-watchos-OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}/liberlang.xcframework" >> $GITHUB_ENV
          echo "WATCHOS_SIMULATOR_FRAMEWORK=xcframework-slices/liberlang-xcframework-slice-watchos_sim-OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}/liberlang.xcframework" >> $GITHUB_ENV
          echo "TVOS_FRAMEWORK=xcframework-slices/liberlang-xcframework-slice-tvos-OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}/liberlang.xcframework" >> $GITHUB_ENV
          echo "TVOS_SIMULATOR_FRAMEWORK=xcframework-slices/liberlang-xcframework-slice-tvos_sim-OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}/liberlang.xcframework" >> $GITHUB_ENV
          echo "VISIONOS_FRAMEWORK=xcframework-slices/liberlang-xcframework-slice-visionos-OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}/liberlang.xcframework" >> $GITHUB_ENV
          echo "VISIONOS_SIMULATOR_FRAMEWORK=xcframework-slices/liberlang-xcframework-slice-visionos_sim-OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}/liberlang.xcframework" >> $GITHUB_ENV

      - name: Create Combined xcframework
        shell: bash
        run: |

          FRAMEWORK_NAME=liberlang
          OUTPUT_XCFRAMEWORK=${FRAMEWORK_NAME}.xcframework

          ls -lah xcframework-slices
          find xcframework-slices -type d
          find xcframework-slices -type f -name "*.a"

          xcodebuild -create-xcframework \
            -framework "$IOS_FRAMEWORK" \
            -framework "$SIMULATOR_FRAMEWORK" \
            -framework "$WATCHOS_FRAMEWORK" \
            -framework "$WATCHOS_SIMULATOR_FRAMEWORK" \
            -framework "$TVOS_FRAMEWORK" \
            -framework "$TVOS_SIMULATOR_FRAMEWORK" \
            -framework "$VISIONOS_FRAMEWORK" \
            -framework "$VISIONOS_SIMULATOR_FRAMEWORK" \
            -output "$OUTPUT_XCFRAMEWORK"

      - name: Check Architecture
        run: |
          ls -lah liberlang.xframework
          du -sh liberlang.xframework
          #lipo -info "$OUTPUT_XCFRAMEWORK/${FRAMEWORK_NAME}" || 1
          
      - name: Upload Combined xcframework Artifact
        uses: actions/upload-artifact@v4
        with:
          name: lipo-OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}
          path: liberlang.xcframework
  # test_matrix:
  #   name: Test Matrix - ${{ matrix.platform.name }}
  #   runs-on: macos-latest
  #   needs: combine_xcframework
  #   strategy:
  #     matrix:
  #       os: [macos-latest]
  #       platform:
  #         - {name: "iOS Tests", sdk: iphoneos, arch: arm64}
  #         - {name: "macOS Tests", sdk: macosx, arch: x86_64}
  #         - {name: "watchOS Tests", sdk: watchos, arch: arm64}
  #         - {name: "tvOS Tests", sdk: appletvos, arch: arm64}
  #         - {name: "visionOS Tests", sdk: visionos, arch: arm64}
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     - name: Download Combined xcframework Artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: lipo
  #         path: Combined-xcframework # Download to Combined-xcframework folder
  #     - name: Run Tests for ${{ matrix.platform.name }}
  #       shell: bash
  #       run: |-
  #         echo "Running tests for ${{ matrix.platform.name }}"
  #         # ... (Your test execution commands for each platform) ...
  #         # Example: xcodebuild test -project ... -scheme ... -destination ...
