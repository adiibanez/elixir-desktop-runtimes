name: Build Apple targets liberlang.xframework
on:
  push:
    branches:
      - main
      - refactoring
  pull_request:
env:
  OPENSSL_VERSION: "3.4.0"
  OPENSSL_HASH: "002a2d6b30b58bf4bea46c43bdd96365aaf8daa6c428782aa4feee06da197df3"
jobs:
  build_setup:
    name: Setup Dependencies
    runs-on: macos-latest
    env:
      FRAMEWORK_NAME: "liberlang"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Cache ASDF and Toolchains
        uses: actions/cache@v4
        id: asdf-cache
        with:
          path: ~/.asdf
          key: asdf-cache-${{ runner.os }}-${{ hashFiles('.tool-versions') }}
          restore-keys: |
            asdf-cache-${{ runner.os }}-
      - name: Cache Openssl source
        uses: actions/cache@v4
        id: openssl-cache
        with:
          path: |
            openssl-${{ env.OPENSSL_VERSION }}
          key: openssl-source-cache-${{ env.OPENSSL_VERSION }}
      - name: Download and Extract OpenSSL
        if: steps.openssl-cache.outputs.cache-hit != 'true'
        id: openssl-download
        run: |
          wget "https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz"
          # echo "$OPENSSL_HASH  openssl-$OPENSSL_VERSION.tar.gz" | sha256sum -c
          tar xzf openssl-$OPENSSL_VERSION.tar.gz
          ls -lah ${{github.workspace}}/openssl-$OPENSSL_VERSION

          echo "OPENSSL_VERSION=$OPENSSL_VERSION" >> "$GITHUB_OUTPUT"
          echo "OPENSSL_HASH=$OPENSSL_HASH" >> "$GITHUB_OUTPUT"
          echo "OPENSSL_PATH=$PWD/openssl-$OPENSSL_VERSION" >> "$GITHUB_OUTPUT"
  build_platform_matrix:
    name: Build - ${{ matrix.platform.name }} OTP${{ matrix.erlixir.otp-version }} ELX${{ matrix.erlixir.elixir-version }}
    runs-on: macos-latest
    needs: build_setup
    strategy:
      fail-fast: false
      matrix:
        erlixir:
          - {otp-version: 27.3, elixir-version: 1.18.2, erl-opts-description: "-year2038;-megaco", erl-opts: "--disable-year2038 --disable-megaco-flex-scanner-lineno --disable-megaco-reentrant-flex-scanner", use-git: true, git-repo: "adiibanez/otp", git-ref: "OTP-27.3-noiosminversion"}
          # - { otp-version: 26.2.5.6, elixir-version: 1.18.2, use-git: true, git-repo: "adiibanez/otp", git-ref: "OTP-26.2.5.6-noiosminversion"}
        os: [macos-latest]
        platform:
          # # - {name: "macOS", sdk: macosx, arch: x86_64, openssl_arch: "darwin64-arm64"}
          #  -fembed-bitcode
          - {id: "ios", name: "iOS", sdk: iphoneos, arch: arm64, openssl_arch: "ios64-xcrun", otp_arch: "aarch64-apple-ios" , xcomp: "arm64-ios"}
          - {id: "ios_sim", name: "iOS Simulator", sdk: iphonesimulator, arch: x86_64, openssl_arch: "iossimulator-x86_64-xcrun", otp_arch: "x86_64-apple-iossimulator", xcomp: "x86_64-iossimulator" }
          # - {id: "watchos", name: "watchOS", sdk: watchos, arch: arm64, openssl_arch: "ios64-xcrun", otp_arch: "aarch64-apple-ios", xcomp: "arm64-ios"}
          # - {id: "watchos_sim", name: "watchOS Simulator", sdk: watchsimulator, arch: x86_64, openssl_arch: "iossimulator-x86_64-xcrun", xcomp: "x86_64-iossimulator"}
          # - {id: "tvos", name: "tvOS", sdk: appletvos, arch: arm64, openssl_arch: "ios64-xcrun", otp_arch: "aarch64-apple-ios", xcomp: "arm64-ios"}
          # - {id: "tvos_sim", name: "tvOS Simulator", sdk: appletvsimulator, arch: x86_64, openssl_arch: "iossimulator-x86_64-xcrun", xcomp: "x86_64-iossimulator"}
          # # - {id: "visionos", name: "visionOS", sdk: visionos, arch: arm64, openssl_arch: "ios64-xcrun", otp_arch: "aarch64-apple-ios", xcomp: "arm64-ios"}
          # # # - {id: "visionos_sim", name: "visionOS Simulator", sdk: visionsimulator, arch: x86_64, openssl_arch: "iossimulator-x86_64-xcrun", xcomp: "x86_64-iossimulator"}
          # - {id: "visionos", name: "visionOS", sdk: xros, arch: arm64, openssl_arch: "xros-xcrun", otp_arch: "aarch64-apple-ios", xcomp: "arm64-ios"}
          # - {id: "visionos_sim", name: "visionOS Simulator", sdk: xrsimulator, arch: arm64, openssl_arch: "xrossimulator-xcrun", otp_arch: "aarch64-apple-ios", xcomp: "arm64-iossimulator"}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Cache Openssl source
        uses: actions/cache@v4
        id: openssl-source-cache
        with:
          path: |
            openssl-${{ env.OPENSSL_VERSION }}
          key: openssl-source-cache-${{ env.OPENSSL_VERSION }}
      - name: Cache Openssl builds
        uses: actions/cache@v4
        id: openssl-build-cache
        with:
          path: |
            _build/ios-openssl
            openssl-${{ env.OPENSSL_VERSION }}
            _build/openssl-${{ env.OPENSSL_VERSION }}
          key: openssl-build-cache-${{ env.OPENSSL_VERSION }}-${{ runner.os }}-${{ matrix.platform.sdk }}-${{ matrix.platform.openssl_arch }}-${{ hashFiles('./scripts/install_openssl_new.sh') }}
          # restore-keys: |
          #   openssl-build-cache-${{ env.OPENSSL_VERSION }}-${{ runner.os }}-
          #   openssl-build-cache-${{ env.OPENSSL_VERSION }}-

      - name: Build iOS OpenSSL
        if: false
        shell: bash
        run: |
          mkdir -p _build/ios-openssl
          cd openssl-${{ env.OPENSSL_VERSION }}
          BUILD_DIR=${{github.workspace}}/_build/ios-openssl ../scripts/install_openssl_ios.sh ${{ matrix.platform.arch }} ${{ matrix.platform.id }}
      - name: Build OpenSSL
        id: openssl-build
        if: steps.openssl-build-cache.outputs.cache-hit != 'true'
        run: |

          mkdir -p _build/openssl-${{ env.OPENSSL_VERSION }}
          # https://github.com/erlang/otp/issues/5706
          cp patch/openssl-ios.conf openssl-${{ env.OPENSSL_VERSION }}/Configurations/15-ios.conf
        
          echo "OPENSSL_PREFIX=${{ github.workspace }}/_build/openssl-${{ env.OPENSSL_VERSION }}" >> "$GITHUB_ENV"
          echo "OPENSSL_SRC_PREFIX=${{ github.workspace }}/openssl-${{ env.OPENSSL_VERSION }}" >> "$GITHUB_ENV"
          
          # CXXFLAGS=$CFLAGS \
          # CFLAGS="-fno-common -Os -D__IOS__=yes" \
          # OPENSSL_OPTS="${{matrix.platform.openssl_opts}}" \
          # ARCH=${{ matrix.platform.openssl_arch }} \
          # MAKEFLAGS="-j10 -O" \
          # OPENSSL_PREFIX=${{ github.workspace }}/_build/openssl-${{ env.OPENSSL_VERSION }} \
          # ./scripts/install_openssl_new.sh

          # https://wiki.openssl.org/index.php/Compilation_and_Installation
          # # CXXFLAGS=$CFLAGS \
          # # CFLAGS="-fno-common -Os -D__IOS__=yes" \
          OPENSSL_OPTS="${{matrix.platform.openssl_opts}}" \
          SDKROOT=`xcrun -sdk ${{ matrix.platform.sdk }} --show-sdk-path` \
          CC="xcrun -sdk ${{ matrix.platform.sdk }} cc" \
          CXX="xcrun -sdk ${{ matrix.platform.sdk }} c++" \
          LD="xcrun -sdk ${{ matrix.platform.sdk }} ld" \
          LDFLAGS="-L$SDKROOT/usr/lib/ -lc++ -v" \
          DED_LD=$LD \
          DED_LDFLAGS="-L$SDKROOT/usr/lib/ -r -v" \
          RANLIB="xcrun -sdk ${{ matrix.platform.sdk }} ranlib" \
          AR="xcrun -sdk ${{ matrix.platform.sdk }} ar" \
          ARCH=${{ matrix.platform.openssl_arch }} \
          MAKEFLAGS="-j10 -O" \
          OPENSSL_PREFIX=${{ github.workspace }}/_build/openssl-${{ env.OPENSSL_VERSION }} \
          ./scripts/install_openssl_new.sh        

          env

          ls -lah _build/openssl-$OPENSSL_VERSION
          find _build/openssl-$OPENSSL_VERSION -name "*.a"

      - name: Configure erl options
        if: ${{ matrix.erlixir.erl-opts }} != ''
        run: |
          # echo KERL_CONFIGURE_OPTIONS="${{matrix.erlixir.erl-opts}}" >> "$GITHUB_ENV"
          # used for hashing cache key
          echo "${{matrix.erlixir.erl-opts}}" > .kerl_configuration_options
      - name: Setup asdf .tool-versions
        id: asdf-setup
        run: |
          echo "" > .tool-versions
          echo "erlang ${{matrix.erlixir.otp-version}}" >> .tool-versions
          echo "elixir ${{matrix.erlixir.elixir-version}}" >> .tool-versions
          echo PATH="$HOME/.asdf/shims:$HOME/.asdf/bin:$PATH" >> "$GITHUB_ENV"
      - name: Setup asdf
        uses: asdf-vm/actions/setup@master
      - name: asdf cache
        id: asdf-cache
        uses: actions/cache@v4
        with:
          path: ~/.asdf/
          key: ${{ runner.os }}-${{ hashFiles('**/.tool-versions', '.kerl_configuration_options') }}
      - name: Install CD tools from .tool-versions
        continue-on-error: true
        if: steps.asdf-cache.outputs.cache-hit != 'true'
        uses: asdf-vm/actions/install@master
      - name: Test asdf tools
        id: asdf-test
        run: |
          erl -version
          elixir --version
          mix --version
      - name: OTP Cache
        uses: actions/cache@v3
        id: otp-cache
        with:
          path: |
            otp_src_${{matrix.erlixir.otp-version}}
            _build/otp_release_${{matrix.erlixir.otp-version}}
            _build/otp_builder
          key: macos-otp-${{ matrix.platform.id }}-${{ matrix.erlixir.otp-version }}-erl-opts-${{matrix.erlixir.erl-opts-description }}
          restore-keys: |
            macos-otp-${{ matrix.platform.id }}-${{ matrix.erlixir.otp-version }}-
            macos-otp-
      - name: Download OTP 
        shell: bash
        if: steps.otp-cache.outputs.cache-hit != 'true'
        run: |
          USE_GIT="${{ matrix.erlixir.use-git }}"

          if [ -e otp_src_${{matrix.erlixir.otp-version}} ]; then
            exit 0
            rm -rf otp_src_${{matrix.erlixir.otp-version}}
          fi
          
          if [[ "$USE_GIT" == "true" ]]; then 
            # --branch OTP-${{matrix.erlixir.otp-version}}
            git clone --depth 1 https://github.com/${{matrix.erlixir.git-repo}} --branch ${{matrix.erlixir.git-ref}} otp_src_${{matrix.erlixir.otp-version}}
          else 
            curl -L -O https://github.com/erlang/otp/releases/download/OTP-${{matrix.erlixir.otp-version}}/otp_src_${{matrix.erlixir.otp-version}}.tar.gz
            tar -xzf otp_src_${{matrix.erlixir.otp-version}}.tar.gz
          fi

      - name: Build OTP Round 1 (xcomp)
        id: otp-setup
        # if: false
        if: steps.otp-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |

          ulimit -n 65536
          file "${{github.workspace}}/_build/openssl-${{ env.OPENSSL_VERSION }}/lib/libcrypto.a"

          # unset SDKROOT https://stackoverflow.com/questions/62118332/using-sys-root-for-iphonesimulator-but-targeting-macosx-warning-in-npm-insta

          ls -lah _build/openssl-$OPENSSL_VERSION
          ls -lah _build/

          # echo $CC
          STATIC_NIFS="${{ github.workspace }}/_build/otp_builder/lib/asn1/priv/lib/${{ matrix.platform.otp_arch }}/asn1rt_nif.a,${{github.workspace}}/_build/otp_builder/lib/crypto/priv/lib/${{ matrix.platform.otp_arch }}/crypto.a"

          # priv/lib/x86_64-apple-iossimulator/crypto.a
          echo $STATIC_NIFS

          mkdir -p _build

          # rm -rf _build/otp_builder
          if [ -e _build/otp_builder ]; then
              echo "Otp builder exists."
          else
              cp -r otp_src_${{matrix.erlixir.otp-version}} _build/otp_builder
          fi

          # echo `env` > /tmp/otp_cmd.sh
          ls -lah $OPENSSL_PREFIX
          echo $OPENSSL_PREFIX

          if [ -e $OPENSSL_PREFIX ]; then
              echo "Openssl $OPENSSL_PREFIX exists."
          else
              echo "Openssl $OPENSSL_PREFIX doesn't exists."
          fi

          export OTP_PREFIX=${{github.workspace}}/_build/otp_${{matrix.erlixir.otp-version}}

          # echo KERL_CONFIGURE_OPTIONS="${{matrix.erlixir.kerl-opts}} --disable-debug --without-javac --without-odbc --without-wx --disable-sctp --disable-megaco --disable-corba --disable-hipe --disable-compiler --disable-kernel-poll" \
          # ERL_FLAGS="-smp disable" \
          # OTP_PREFIX=${{github.workspace}}/_build/otp_${{matrix.erlixir.otp-version}} \
          # LIBS="${{github.workspace}}/_build/openssl-${{ env.OPENSSL_VERSION }}/lib/libcrypto.a" \
          # RELEASE_LIBBEAM="yes" ./otp_build configure \
          # --xcomp-conf=xcomp/erl-xcomp-${{ matrix.platform.xcomp }}.conf \
          # --with-ssl=${{github.workspace}}/_build/openssl-${{ env.OPENSSL_VERSION }} \
          # --disable-dynamic-ssl-lib \
          # --enable-static-nifs="$STATIC_NIFS" >> /tmp/otp_cmd.sh
          
          #--prefix="${{ github.workspace }}/_build/otp_release_${{matrix.erlixir.otp-version}}"

          # MAKEFLAGS="-j10 -O" \
          # --host=${{ matrix.platform.xcomp }} \
          cd _build/otp_builder

          ls -lah "${{github.workspace}}/_build/openssl-${{ env.OPENSSL_VERSION }}/lib/"
          file "${{github.workspace}}/_build/openssl-${{ env.OPENSSL_VERSION }}/lib/libcrypto.a"
          otool -L "${{github.workspace}}/_build/openssl-${{ env.OPENSSL_VERSION }}/lib/libcrypto.a"

          # exit 1

          # KERL_CONFIGURE_DISABLE_APPLICATIONS https://github.com/kerl/kerl/blob/master/kerl
          # https://www.erlang.org/docs/19/applications

          INCLUDE_PATH="$OPENSSL_PREFIX/include" \
          LIB_PATH="$OPENSSL_PREFIX/lib" \
          LIB_CRYPTO="$LIB_PATH/libcrypto.a" \
          CFLAGS="-I$INCLUDE_PATH" \
          KERL_CONFIGURE_DISABLE_APPLICATIONS=megaco,snmp,dialyzer,eldap,odbc,mnesia,otp_mibs,observer \
          KERL_CONFIGURE_OPTIONS="${{matrix.erlixir.kerl-opts}} --disable-debug --without-javac --without-odbc --without-wx --disable-sctp --disable-megaco --disable-corba --disable-hipe --disable-compiler --disable-kernel-poll" \
          ERL_FLAGS="-smp disable" \
          ARCH=${{ matrix.platform.arch }} \
          OTP_PREFIX=${{github.workspace}}/_build/otp_${{matrix.erlixir.otp-version}} \
          LIBS="${{github.workspace}}/_build/openssl-${{ env.OPENSSL_VERSION }}/lib/libcrypto.a" \
          MAKEFLAGS="-j10 -O" \
          RELEASE_LIBBEAM="yes" ./otp_build configure \
          --xcomp-conf=xcomp/erl-xcomp-${{ matrix.platform.xcomp }}.conf \
          --disable-dynamic-ssl-lib \
          --with-ssl=${{github.workspace}}/_build/openssl-${{ env.OPENSSL_VERSION }} \
          --enable-static-nifs="$STATIC_NIFS"
          
          # rm -rf /tmp/otp_builder
          # cp -r ./ /tmp/otp_builder

          # rm -rf /tmp/openssl_otp
          # cp -r $OPENSSL_PREFIX/ /tmp/openssl_otp

          ./otp_build boot -a
          ./otp_build release -a

          find . -type d -name release

          #ls -alh ${{ github.workspace }}/_build/otp_release_${{matrix.erlixir.otp-version}}

          find ~+ -name libbeam.a
          find ~+ -name asn1rt_nif.a
          find ~+ -name crypto.a

          #otool -L ${{ github.workspace }}/_build/otp_builder/lib/asn1/priv/lib/${{ matrix.platform.otp_arch }}/asn1rt_nif.a
          #otool -L ${{ github.workspace }}/_build/otp_builder/lib/crypto/priv/lib/${{ matrix.platform.otp_arch }}/crypto.a
          
          cd ${{ github.workspace }}

          #ls -lah $OTP_PREFIX
          ls -lah _build/otp_builder

      - name: Combine static OTP libs
        continue-on-error: false
        shell: bash
        run: |

          cd _build/otp_builder/
          find . -name libbeam.a
          cd ${{ github.workspace }}

          cd _build/otp_builder/release/${{matrix.platform.otp_arch}}

          # find . -name libbeam.a
          # find . -name libcrypto.a
          INCLUDE_PATTERN="lib/libbeam.a|libz.a|libcrypto.a|_r.a|_s.a"
          # https://askubuntu.com/questions/444551/get-absolute-path-of-files-using-find-command

          find ~+ -type f -name "*.a" | grep -E $INCLUDE_PATTERN | awk '{print " ls -alh " $1}' | sh
          #  >> /tmp/lib_report.log
          #find ~+ -type f -name "*.a" | grep -E $INCLUDE_PATTERN | awk '{print " lipo -info " $1}' | sh >> /tmp/lib_report.log
          #find ~+ -type f -name "*.a" | grep -E $INCLUDE_PATTERN | awk '{print " otool -L " $1}' | sh >> /tmp/lib_report.log

          rm -rf /tmp/otp_libs
          mkdir /tmp/otp_libs
          find ~+ -type f -name "*.a" | grep -E $INCLUDE_PATTERN | awk '{print " cp " $1 " `basename " $1 "`"}' | sh

          LIBS=`find ~+ -type f -name "*.a" | grep -E $INCLUDE_PATTERN | awk '{printf " %s", $1} END { print "" }'`
          echo $LIBS

          OUTPUT_LIB="${{ github.workspace }}/_build/liberlang_OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}.a"

          # xcrun -sdk ${{matrix.platform.sdk}} 
          rm -f $OUTPUT_LIB
          libtool -static -o $OUTPUT_LIB ${{ github.workspace }}/_build/otp_builder/bin/${{matrix.platform.otp_arch}}/libbeam.a $LIBS
  
      - name: Check output lib
        shell: bash
        continue-on-error: true
        run: |
          file ${{ github.workspace }}/_build/liberlang_OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}.a
          lipo -info ${{ github.workspace }}/_build/liberlang_OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}.a

      - name: Upload liberlang.a libs Artifact for ${{ matrix.platform.name }}
        uses: actions/upload-artifact@v4
        with:
          name: debug-libs-OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}-${{ matrix.platform.id }}-liberlang
          path: /tmp/otp_libs/*

      - name: Upload liberlang.a Artifact for ${{ matrix.platform.name }}
        uses: actions/upload-artifact@v4
        with:
          name: libs-OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}-${{ matrix.platform.id }}-liberlang
          path: _build/liberlang_OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}.a
      
  #     - name: Set up Rust Toolchain (Nightly)
  #       uses: dtolnay/rust-toolchain@nightly
  #       with:
  #         targets: ${{ matrix.platform.rust_target }}

  #     - name: Build NIFs for ${{ matrix.platform.name }} OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}
  #       shell: bash
  #       env: 
  #         RUSTLER_BTLEPLUG_BUILD: 1
  #         WASMEX_BUILD: 1
  #         RUST_TARGET: ${{ matrix.platform.otp_arch }}
  #         RUSTFLAGS: "-C target-feature=+crt-static"
  #       run: |
  #         echo "Building NIFs for ${{ matrix.platform.name }} - ${{ matrix.platform.sdk }} - ${{ matrix.platform.arch }}"

  #         export SDKROOT="$(xcrun --sdk ${{ matrix.platform.sdk }} --show-sdk-path)"
  #         export CC="xcrun -sdk ${{ matrix.platform.sdk }} cc -arch arm64"
  #         export CFLAGS="-mios-version-min=11.0 -fno-common -Os -D__IOS__=yes"

  #         mkdir -p _build/nifs/
  #         cd _build/nifs/

  #         # git clone --depth 1 https://github.com/elixir-desktop/exqlite.git
  #         # cd exqlite
  #         # mix deps.get
  #         # mix release
  #         # cd ..

  #         # git clone --depth 1 https://github.com/diodechain/libsecp256k1.git
  #         # cd libsecp256k1
  #         # mix deps.get
  #         # mix release
  #         # cd ..

  #         git clone --depth 1 https://github.com/adiibanez/rustler_btleplug.git --branch v0.0.15-alpha
  #         cd rustler_btleplug
  #         mix deps.get
  #         mix release
  #         cd ..

  #         # git clone --depth 1 https://github.com/adiibanez/wasmex.git --branch main
  #         # cd wasmex
  #         # mix deps.get
  #         # mix release
  #         # cd ..

  #         # git clone --depth 1 https://github.com/adiibanez/explorer.git --branch main
  #         # cd explorer
  #         # mix deps.get
  #         # mix release
  #         # cd ..

  #         cd ${{ github.workspace }}

  #         find _build/nifs -type f -name "*.a"

  #     - name: Upload Nifs for ${{ matrix.platform.name }} OTP-${{matrix.erlixir.otp-version}} ELX-${{matrix.erlixir.elixir-version}}
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: libs-OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}-${{ matrix.platform.id }}-nifs
  #         path: |
  #           _build/nifs/**/**.a

      - name: Download liberlang  ${{ matrix.platform.name }} OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}
        uses: actions/download-artifact@v4
        with:
          name: libs-OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}-${{ matrix.platform.id }}-liberlang
          path: _build/libs

      # - name: Download Libs for ${{ matrix.platform.name }} OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}
      #   uses: actions/download-artifact@v4
      #   with:
      #     pattern: libs-OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}-${{ matrix.platform.id }}-*
      #     path: _build/libs
      #     merge-multiple: true

      - name: Build liberlang.xcframework Slice for ${{ matrix.platform.name }} OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}
        shell: bash
        id: build-xcframework-slice
        run: |
          ls -lah ./
          ls -lah _build/libs
          INCLUDE_PATTERN=".a"
          
          echo LOOKUP_LIBS for liberlang.xcframework Slice
          find ~+ -type f -name "*.a" | grep -E $INCLUDE_PATTERN | awk '{print " ls -alh " $1}' | sh
          
          find ${{ github.workspace }}/_build/libs -type f -name "*.a" | grep -E $INCLUDE_PATTERN | awk '{print " ls -alh " $1}' | sh
          LIBS=`find ${{ github.workspace }}/_build/libs -type f -name "*.a" | grep -E $INCLUDE_PATTERN | awk '{printf " -library %s", $1} END { print "" }'`
          echo $LIBS

          echo "Building liberlang.xcframework slice for ${{ matrix.platform.name }}"
          mkdir liberlang_xcframework_slice-OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}-${{ matrix.platform.id }}

          cd liberlang_xcframework_slice-OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}-${{ matrix.platform.id }}

          xcodebuild -create-xcframework \
            -output liberlang.xcframework \
            $LIBS

          # cp -rf liberlang.xcframework /tmp/otp_libs/

          echo "xcframework_slice_path=liberlang_xcframework_slice-OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}-${{ matrix.platform.id }}" >> "$GITHUB_OUTPUT"

      - name: Upload liberlang.xcframework Slice Artifact for ${{ matrix.platform.name }}
        uses: actions/upload-artifact@v4
        id: upload-xcframework-slice
        with:
          name: liberlang-xcframework-slice-OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}-${{ matrix.platform.id }}
          path: ${{ steps.build-xcframework-slice.outputs.xcframework_slice_path }}

  combine_xcframework:
    # if: false
    name: Combine XC Framework
    runs-on: macos-latest
    needs: build_platform_matrix
    strategy:
      fail-fast: false
      matrix:
        erlixir:
          - {otp-version: 27.3, elixir-version: 1.18.2, erl-opts-description: "-year2038;-megaco", erl-opts: "--disable-year2038 --disable-megaco-flex-scanner-lineno --disable-megaco-reentrant-flex-scanner", use-git: true, git-repo: "adiibanez/otp", git-ref: "OTP-27.3-noiosminversion"}
          - { otp-version: 26.2.5.6, elixir-version: 1.18.2, use-git: true, git-repo: "adiibanez/otp", git-ref: "OTP-26.2.5.6-noiosminversion"}
        os: [macos-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download liberlang.xcframework Slice Artifacts
        uses: actions/download-artifact@v4
        with:
          path: xcframework-slices
          pattern: liberlang-xcframework-slice-OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}-*
          # merge-multiple: true

      - name: Setup Combined xcframework env
        shell: bash
        run: |
          echo "IOS_FRAMEWORK=xcframework-slices/liberlang-xcframework-slice-OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}-ios/liberlang.xcframework" >> $GITHUB_ENV
          echo "SIMULATOR_FRAMEWORK=xcframework-slices/liberlang-xcframework-slice-OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}-ios_sim/liberlang.xcframework" >> $GITHUB_ENV
          # echo "WATCHOS_FRAMEWORK=xcframework-slices/liberlang-xcframework-slice-OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}-watchos/liberlang.xcframework" >> $GITHUB_ENV
          # echo "WATCHOS_SIMULATOR_FRAMEWORK=xcframework-slices/liberlang-xcframework-slice-OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}-watchos_sim/liberlang.xcframework" >> $GITHUB_ENV
          # echo "TVOS_FRAMEWORK=xcframework-slices/liberlang-xcframework-slice-OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}-tvos/liberlang.xcframework" >> $GITHUB_ENV
          # echo "TVOS_SIMULATOR_FRAMEWORK=xcframework-slices/liberlang-xcframework-slice-OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}-tvos_sim/liberlang.xcframework" >> $GITHUB_ENV
          # echo "VISIONOS_FRAMEWORK=xcframework-slices/liberlang-xcframework-slice-OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}-visionos/liberlang.xcframework" >> $GITHUB_ENV
          # echo "VISIONOS_SIMULATOR_FRAMEWORK=xcframework-slices/liberlang-xcframework-slice-OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}-visionos_sim/liberlang.xcframework" >> $GITHUB_ENV

      - name: Create Combined xcframework
        shell: bash
        run: |

          FRAMEWORK_NAME=liberlang
          OUTPUT_XCFRAMEWORK=${FRAMEWORK_NAME}.xcframework

          ls -lah xcframework-slices
          find xcframework-slices -type d
          find xcframework-slices -type f -name "*.a"

          xcodebuild -create-xcframework \
            -framework "$IOS_FRAMEWORK" \
            -framework "$SIMULATOR_FRAMEWORK" \
            -output "$OUTPUT_XCFRAMEWORK"

          # -framework "$WATCHOS_FRAMEWORK" \
          # -framework "$WATCHOS_SIMULATOR_FRAMEWORK" \
          # -framework "$TVOS_FRAMEWORK" \
          # -framework "$TVOS_SIMULATOR_FRAMEWORK" \
          # -framework "$VISIONOS_FRAMEWORK" \
          # -framework "$VISIONOS_SIMULATOR_FRAMEWORK" \
          

      - name: Check Architecture
        run: |
          ls -lah liberlang.xframework
          du -sh liberlang.xframework
          #lipo -info "$OUTPUT_XCFRAMEWORK/${FRAMEWORK_NAME}" || 1
          
      - name: Upload Combined xcframework Artifact
        uses: actions/upload-artifact@v4
        with:
          name: lipo-OTP-${{matrix.erlixir.otp-version}}-ELX-${{matrix.erlixir.elixir-version}}
          path: liberlang.xcframework
