name: Build iOS Openssl
description: ios specific openssl

inputs:
  version:
    required: true
    description: The OpenSSL version to build. # Add description
  hash:
    required: true
    description: The SHA256 hash of the OpenSSL source tarball. # Add description
  base_arch:
    required: true
    description: The base architecture to build for (e.g., arm64, x86_64). # Add description

runs:
  using: 'composite'
  steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache Openssl source
      uses: actions/cache@v4
      id: openssl-cache
      with:
        path: |
          openssl-${{ inputs.version }}
        key: openssl-source-cache-${{ inputs.version }}

    - name: Download and Extract OpenSSL
      shell: bash
      if: steps.openssl-cache.outputs.cache-hit != 'true'
      id: openssl-download
      run: |
        wget "https://www.openssl.org/source/openssl-${{ inputs.version }}.tar.gz"
        # echo "${{ inputs.hash }}  openssl-${{ inputs.version }}.tar.gz" | sha256sum -c  # Corrected hash check (see below)
        tar xzf openssl-${{ inputs.version }}.tar.gz
        ls -lah ${{ github.workspace }}/openssl-${{ inputs.version }}

        echo "OPENSSL_VERSION=${{ inputs.version }}" >> "$GITHUB_OUTPUT"
        echo "OPENSSL_HASH=${{ inputs.hash }}" >> "$GITHUB_OUTPUT" # No need to set again
        echo "OPENSSL_PATH=${{ github.workspace }}/openssl-${{ inputs.version }}" >> "$GITHUB_OUTPUT"

    - name: Cache Openssl iOS builds
      uses: actions/cache@v4
      id: openssl-ios-build-cache
      with:
        path: |
          _build/ios-openssl
        key: openssl-ios-build-cache-${{ inputs.version }}-${{ runner.os }}-${{ inputs.base_arch }}-${{ hashFiles('./scripts/install_openssl_ios.sh') }}

    - name: Build iOS OpenSSL
      if: steps.openssl-ios-build-cache.outputs.cache-hit != 'true'
      id: build-openssl
      shell: bash
      run: |
        mkdir -p _build/ios-openssl

        # use patched config
        cp patch/openssl-ios.conf openssl-${{ inputs.version }}/Configurations/15-ios.conf

        # echo patching openssl...
        # if [ ! -f ./apps/lib/http_server.c.orig ]; then
        # 	cp -f ./apps/lib/http_server.c ./apps/lib/http_server.c.orig
        # else
        # 	cp -f ./apps/lib/http_server.c.orig ./apps/lib/http_server.c.conf
        # fi

        ls -alh openssl-${{ inputs.version }}/apps/lib/http_server.c
        ls -alh ${{github.workspace}}/patch/openssl_http_server.patch
        patch openssl-${{ inputs.version }}/apps/lib/http_server.c ${{github.workspace}}/patch/openssl_http_server.patch

        cd openssl-${{ inputs.version }}
        OPENSSL_VERSION=${{ inputs.version }} BUILD_DIR=${{ github.workspace }}/_build/ios-openssl ../scripts/install_openssl_ios.sh ${{ inputs.base_arch }}

    - name: Check libs
      shell: bash
      env:
        BUILD_DIR: ${{ github.workspace }}/_build/ios-openssl
      run: |
        find "$BUILD_DIR" -name "*.a"
        find "$BUILD_DIR" -name "*.a" -exec lipo -info {} \;

    - name: Extract logs for ${{ inputs.base_arch }} # removed matrix (since it's not used here)
      if: always() && steps.build-openssl.outcome != 'success'
      uses: actions/upload-artifact@v4
      with:
        name: debug-logs-openssl-ios-build-${{ inputs.version }}-${{ runner.os }}-${{ inputs.base_arch }}-${{ hashFiles('./scripts/install_openssl_ios.sh') }}
        path: '**/*.log'

    - name: Cache Openssl iOS builds (Save)
      uses: actions/cache/save@v4 # Use the save-only action
      id: openssl-ios-build-cache-save
      if: steps.build-openssl.outcome == 'success'
      with:
        path: |
          _build/ios-openssl
        key: openssl-ios-build-cache-${{ inputs.version }}-${{ runner.os }}-${{ inputs.base_arch }}-${{ hashFiles('./scripts/install_openssl_ios.sh') }}
